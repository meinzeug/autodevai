version: '3.8'

# Sandbox Template for Project Isolation
# This template creates isolated environments for each project
# Ports are dynamically assigned in range 50100-50199

x-sandbox-common: &sandbox-common
  restart: unless-stopped
  security_opt:
    - no-new-privileges:true
  cap_drop:
    - ALL
  cap_add:
    - CHOWN
    - DAC_OVERRIDE
    - FOWNER
    - SETGID
    - SETUID
  read_only: false
  tmpfs:
    - /tmp:noexec,nosuid,size=100m
  ulimits:
    nproc: 1024
    nofile:
      soft: 1024
      hard: 2048

networks:
  sandbox-network:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.21.0.0/16
  autodev-bridge:
    external: true
    name: autodev_autodev-network

services:
  # Node.js Development Sandbox
  nodejs-sandbox:
    <<: *sandbox-common
    build:
      context: .
      dockerfile: Dockerfile.sandbox
      args:
        BASE_IMAGE: node:20-bullseye
        SANDBOX_TYPE: nodejs
    container_name: "${SANDBOX_ID:-sandbox}-nodejs"
    environment:
      SANDBOX_ID: "${SANDBOX_ID:-default}"
      SANDBOX_TYPE: nodejs
      NODE_ENV: development
      PROJECT_PATH: /workspace/project
      ISOLATION_LEVEL: "${ISOLATION_LEVEL:-medium}"
      RESOURCE_LIMITS: "cpu=1,memory=2g"
    ports:
      - "${SANDBOX_PORT:-50100}:3000"
      - "${SANDBOX_DEBUG_PORT:-50101}:9229"
    volumes:
      - type: bind
        source: "${PROJECT_PATH:-./projects/default}"
        target: /workspace/project
      - type: volume
        source: "${SANDBOX_ID:-default}-node-modules"
        target: /workspace/project/node_modules
      - type: tmpfs
        target: /workspace/temp
        tmpfs:
          size: 500m
    networks:
      sandbox-network:
        ipv4_address: 172.21.0.10
      autodev-bridge:
    working_dir: /workspace/project
    user: "1000:1000"

  # Python Development Sandbox
  python-sandbox:
    <<: *sandbox-common
    build:
      context: .
      dockerfile: Dockerfile.sandbox
      args:
        BASE_IMAGE: python:3.11-bullseye
        SANDBOX_TYPE: python
    container_name: "${SANDBOX_ID:-sandbox}-python"
    environment:
      SANDBOX_ID: "${SANDBOX_ID:-default}"
      SANDBOX_TYPE: python
      PYTHONPATH: /workspace/project
      PROJECT_PATH: /workspace/project
      ISOLATION_LEVEL: "${ISOLATION_LEVEL:-medium}"
    ports:
      - "${SANDBOX_PYTHON_PORT:-50102}:8000"
      - "${SANDBOX_JUPYTER_PORT:-50103}:8888"
    volumes:
      - type: bind
        source: "${PROJECT_PATH:-./projects/default}"
        target: /workspace/project
      - type: volume
        source: "${SANDBOX_ID:-default}-pip-cache"
        target: /home/sandbox/.cache/pip
    networks:
      sandbox-network:
        ipv4_address: 172.21.0.11
      autodev-bridge:
    working_dir: /workspace/project
    user: "1000:1000"

  # Database Sandbox (PostgreSQL)
  postgres-sandbox:
    <<: *sandbox-common
    image: postgres:16-alpine
    container_name: "${SANDBOX_ID:-sandbox}-postgres"
    environment:
      POSTGRES_DB: "${SANDBOX_DB:-sandbox_db}"
      POSTGRES_USER: "${SANDBOX_DB_USER:-sandbox}"
      POSTGRES_PASSWORD: "${SANDBOX_DB_PASS:-sandbox_pass_2024}"
      POSTGRES_HOST_AUTH_METHOD: md5
    ports:
      - "${SANDBOX_DB_PORT:-50104}:5432"
    volumes:
      - type: volume
        source: "${SANDBOX_ID:-default}-postgres-data"
        target: /var/lib/postgresql/data
      - type: bind
        source: "${PROJECT_PATH:-./projects/default}/sql"
        target: /docker-entrypoint-initdb.d
        read_only: true
    networks:
      sandbox-network:
        ipv4_address: 172.21.0.20
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${SANDBOX_DB_USER:-sandbox} -d ${SANDBOX_DB:-sandbox_db}"]
      interval: 30s
      timeout: 10s
      retries: 3
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - FOWNER
      - SETGID
      - SETUID

  # Redis Cache Sandbox
  redis-sandbox:
    <<: *sandbox-common
    image: redis:7-alpine
    container_name: "${SANDBOX_ID:-sandbox}-redis"
    ports:
      - "${SANDBOX_REDIS_PORT:-50105}:6379"
    volumes:
      - type: volume
        source: "${SANDBOX_ID:-default}-redis-data"
        target: /data
    networks:
      sandbox-network:
        ipv4_address: 172.21.0.21
    command: redis-server --appendonly yes --requirepass "${SANDBOX_REDIS_PASS:-sandbox_redis_2024}"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Code Server (VS Code in browser)
  code-server:
    <<: *sandbox-common
    image: codercom/code-server:latest
    container_name: "${SANDBOX_ID:-sandbox}-code"
    environment:
      PASSWORD: "${SANDBOX_CODE_PASS:-code_secure_2024}"
      SUDO_PASSWORD: "${SANDBOX_CODE_PASS:-code_secure_2024}"
    ports:
      - "${SANDBOX_CODE_PORT:-50106}:8080"
    volumes:
      - type: bind
        source: "${PROJECT_PATH:-./projects/default}"
        target: /home/coder/project
      - type: volume
        source: "${SANDBOX_ID:-default}-code-config"
        target: /home/coder/.config
    networks:
      sandbox-network:
        ipv4_address: 172.21.0.30
      autodev-bridge:
    working_dir: /home/coder/project
    user: "1000:1000"

  # Test Runner Container
  test-runner:
    <<: *sandbox-common
    build:
      context: .
      dockerfile: Dockerfile.sandbox
      args:
        BASE_IMAGE: node:20-bullseye
        SANDBOX_TYPE: test-runner
    container_name: "${SANDBOX_ID:-sandbox}-tests"
    environment:
      SANDBOX_ID: "${SANDBOX_ID:-default}"
      CI: "true"
      NODE_ENV: test
    volumes:
      - type: bind
        source: "${PROJECT_PATH:-./projects/default}"
        target: /workspace/project
        read_only: true
      - type: volume
        source: "${SANDBOX_ID:-default}-test-reports"
        target: /workspace/reports
    networks:
      sandbox-network:
        ipv4_address: 172.21.0.40
    working_dir: /workspace/project
    user: "1000:1000"
    profiles:
      - testing

volumes:
  ${SANDBOX_ID:-default}-node-modules:
    driver: local
  ${SANDBOX_ID:-default}-pip-cache:
    driver: local
  ${SANDBOX_ID:-default}-postgres-data:
    driver: local
  ${SANDBOX_ID:-default}-redis-data:
    driver: local
  ${SANDBOX_ID:-default}-code-config:
    driver: local
  ${SANDBOX_ID:-default}-test-reports:
    driver: local