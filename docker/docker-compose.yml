version: '3.8'

# AutoDev-AI Neural Bridge Platform - Production Docker Compose
# Port allocation: 50000-50100 (strictly enforced)
# Main GUI: 50000, Database: 50050, Cache: 50051, Monitoring: 50090-50091
# Sandboxes: 50010-50089 (reserved for dynamic project containers)

services:
  autodev-ai:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: runtime
    container_name: autodev-ai-platform
    restart: unless-stopped
    ports:
      - '50000:50000'
      - '50001:50001'
      - '50002:50002'
      - '50003:50003'
    environment:
      - RUST_LOG=info
      - AUTODEV_DATA_DIR=/app/data
      - AUTODEV_LOG_DIR=/app/logs
      - AUTODEV_CACHE_DIR=/app/cache
      - AUTODEV_PORT_RANGE=50000-50100
      - CLAUDE_FLOW_ENABLED=true
      - NEURAL_BRIDGE_ENABLED=true
    volumes:
      - autodev_data:/app/data
      - autodev_logs:/app/logs
      - autodev_cache:/app/cache
    networks:
      - autodev_network
    healthcheck:
      test: ['CMD', './autodev-ai', '--health-check']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - FOWNER
      - SETGID
      - SETUID
    read_only: true
    tmpfs:
      - /tmp:rw,noexec,nosuid,size=100m

  redis:
    image: redis:7-alpine
    container_name: autodev-ai-redis
    restart: unless-stopped
    ports:
      - '50051:6379'
    volumes:
      - redis_data:/data
    networks:
      - autodev_network
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-autodev_secure_password}
    healthcheck:
      test: ['CMD', 'redis-cli', '--raw', 'incr', 'ping']
      interval: 30s
      timeout: 5s
      retries: 3
    security_opt:
      - no-new-privileges:true

  postgres:
    image: postgres:15-alpine
    container_name: autodev-ai-postgres
    restart: unless-stopped
    ports:
      - '50050:5432'
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-autodev_ai}
      - POSTGRES_USER=${POSTGRES_USER:-autodev_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-secure_password_change_me}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - autodev_network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER:-autodev_user}']
      interval: 30s
      timeout: 5s
      retries: 3
    security_opt:
      - no-new-privileges:true

  prometheus:
    image: prom/prometheus:latest
    container_name: autodev-ai-prometheus
    restart: unless-stopped
    ports:
      - '50091:9090'
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - autodev_network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--web.external-url=http://localhost:50091'
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    user: '65534:65534'
    read_only: true
    tmpfs:
      - /tmp:rw,noexec,nosuid,size=50m

  grafana:
    image: grafana/grafana:latest
    container_name: autodev-ai-grafana
    restart: unless-stopped
    ports:
      - '50090:3000'
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin_change_me}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
      - GF_SECURITY_ALLOW_EMBEDDING=false
      - GF_SECURITY_COOKIE_SECURE=true
      - GF_SECURITY_COOKIE_SAMESITE=strict
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - autodev_network
    depends_on:
      - prometheus
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    user: '472:0'
    tmpfs:
      - /tmp:rw,noexec,nosuid,size=50m

  nginx:
    image: nginx:alpine
    container_name: autodev-ai-nginx
    restart: unless-stopped
    ports:
      - '50080:80'
      - '50081:443'
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - autodev_network
    depends_on:
      - autodev-ai
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost/health']
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true

  vector:
    image: timberio/vector:latest-alpine
    container_name: autodev-ai-vector
    restart: unless-stopped
    volumes:
      - ./vector.toml:/etc/vector/vector.toml:ro
      - autodev_logs:/app/logs:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - autodev_network
    depends_on:
      - autodev-ai
    security_opt:
      - no-new-privileges:true

networks:
  autodev_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  autodev_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}
  autodev_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${LOGS_PATH:-./logs}
  autodev_cache:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
