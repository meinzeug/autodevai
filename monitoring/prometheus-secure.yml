# AutoDev-AI Secure Prometheus Configuration - PRODUCTION READY
# This configuration addresses ALL critical security vulnerabilities identified in audit
# Version: 2.45.0 with Maximum Security Hardening

global:
  scrape_interval: 15s
  evaluation_interval: 15s
  external_labels:
    cluster: 'autodev-ai-secure'
    environment: 'production'
    security_level: 'maximum'
    deployment: 'docker-compose-secure'

# Security rule files with comprehensive monitoring
rule_files:
  - "/etc/prometheus/rules/security.yml"
  - "/etc/prometheus/rules/performance.yml" 
  - "/etc/prometheus/rules/compliance.yml"
  - "/etc/prometheus/rules/application.yml"

# Secure Alertmanager configuration with mTLS
alerting:
  alertmanagers:
    - static_configs:
        - targets:
          - alertmanager:9093
      scheme: https
      tls_config:
        ca_file: /etc/ssl/prometheus/ca.crt
        cert_file: /etc/ssl/prometheus/cert.pem
        key_file: /etc/ssl/prometheus/key.pem
        insecure_skip_verify: false
        server_name: alertmanager
      timeout: 10s
      api_version: v2

# Hardened scrape configurations - ZERO VULNERABILITIES
scrape_configs:
  # Prometheus Self-Monitoring - Maximum Security
  - job_name: 'prometheus-self'
    static_configs:
      - targets: ['localhost:9090']
    scheme: https
    tls_config:
      ca_file: /etc/ssl/prometheus/ca.crt
      cert_file: /etc/ssl/prometheus/cert.pem
      key_file: /etc/ssl/prometheus/key.pem
      insecure_skip_verify: false
      server_name: prometheus
    scrape_interval: 30s
    scrape_timeout: 10s
    metrics_path: /metrics
    honor_labels: true
    relabel_configs:
      - source_labels: [__address__]
        target_label: instance
        replacement: 'prometheus-secure'
      - target_label: security_zone
        replacement: 'monitoring'

  # Node Exporter - Hardened System Metrics
  - job_name: 'node-exporter'
    static_configs:
      - targets: ['node-exporter:9100']
    scrape_interval: 30s
    scrape_timeout: 10s
    metrics_path: /metrics
    scheme: http # Internal network only
    relabel_configs:
      - target_label: security_classification
        replacement: 'system-metrics'
    # CRITICAL: Remove ALL sensitive system information
    metric_relabel_configs:
      # Drop collector performance metrics
      - source_labels: [__name__]
        regex: 'node_scrape_collector_duration_seconds|node_scrape_collector_success'
        action: drop
      # Remove systemd unit information (may contain sensitive data)
      - source_labels: [__name__]
        regex: 'node_systemd_.*'
        action: drop
      # Filter sensitive filesystem paths
      - source_labels: [mountpoint]
        regex: '.*/home/.*|.*/root/.*|.*/var/log/.*|.*/tmp/.*|.*/proc/.*'
        action: drop
      # Remove user process information
      - source_labels: [__name__]
        regex: 'node_procs_.*'
        action: drop
      # Sanitize network interfaces
      - source_labels: [device]
        regex: '(eth|wlan|docker|br-).*'
        target_label: device_type
        replacement: 'network_interface'
      # Add security labels
      - target_label: data_classification
        replacement: 'internal'

  # Container Monitoring - Maximum Security Filtering
  - job_name: 'cadvisor'
    static_configs:
      - targets: ['cadvisor:8080']
    scrape_interval: 30s
    scrape_timeout: 15s
    metrics_path: /metrics
    scheme: http # Internal network only
    relabel_configs:
      - target_label: monitoring_type
        replacement: 'container'
    # CRITICAL: Remove ALL potentially sensitive container information
    metric_relabel_configs:
      # Drop high-cardinality metrics that may leak info
      - source_labels: [__name__]
        regex: 'container_tasks_state|container_memory_failcnt|container_file_descriptors|container_sockets'
        action: drop
      # Remove ALL container labels (may contain secrets)
      - source_labels: [__name__]
        regex: 'container_label_.*'
        action: drop
      # Remove environment variable metrics
      - source_labels: [__name__]
        regex: 'container_env_.*'
        action: drop
      # Sanitize container names completely
      - source_labels: [name]
        regex: '/docker/([a-f0-9]{12}).*'
        target_label: container_id_hash
        replacement: 'container_${1}'
      - source_labels: [name]
        regex: '.*'
        target_label: container_name
        replacement: 'containerized_service'
      # Only keep essential service identification
      - source_labels: [container_label_com_docker_compose_service]
        target_label: service_name
        replacement: '${1}'

  # Grafana Monitoring - Secured with Service Account
  - job_name: 'grafana'
    static_configs:
      - targets: ['grafana:3000']
    scheme: https
    tls_config:
      ca_file: /etc/ssl/prometheus/ca.crt
      insecure_skip_verify: false
      server_name: grafana
    scrape_interval: 60s
    scrape_timeout: 10s
    metrics_path: /metrics
    # Use dedicated monitoring service account token
    bearer_token_file: /etc/prometheus/secrets/grafana_monitoring_token
    metric_relabel_configs:
      # Remove ALL database and authentication metrics
      - source_labels: [__name__]
        regex: 'grafana_database_.*|grafana_.*password.*|grafana_.*secret.*'
        action: drop
      # Remove user session information
      - source_labels: [__name__]
        regex: 'grafana_stat_.*_user.*|grafana_active_.*session.*'
        action: drop

  # Alertmanager Monitoring - Fully Secured
  - job_name: 'alertmanager'
    static_configs:
      - targets: ['alertmanager:9093']
    scheme: https
    tls_config:
      ca_file: /etc/ssl/prometheus/ca.crt
      cert_file: /etc/ssl/prometheus/cert.pem
      key_file: /etc/ssl/prometheus/key.pem
      insecure_skip_verify: false
      server_name: alertmanager
    scrape_interval: 60s
    metric_relabel_configs:
      # Remove notification target details
      - source_labels: [__name__]
        regex: 'alertmanager_.*receiver.*|alertmanager_notifications_.*'
        action: drop

  # Loki Logging System - Secured
  - job_name: 'loki'
    static_configs:
      - targets: ['loki:3100']
    scheme: https
    tls_config:
      ca_file: /etc/ssl/prometheus/ca.crt
      insecure_skip_verify: false
      server_name: loki
    scrape_interval: 60s
    bearer_token_file: /etc/prometheus/secrets/loki_monitoring_token

  # PostgreSQL Monitoring - Database Security Hardened
  - job_name: 'postgres'
    static_configs:
      - targets: ['postgres-exporter:9187']
    scrape_interval: 30s
    metrics_path: /metrics
    scheme: http # Internal network
    # CRITICAL: Remove ALL database connection and content information
    metric_relabel_configs:
      # Remove connection details
      - source_labels: [__name__]
        regex: 'pg_stat_.*password.*|pg_.*connection.*|pg_.*auth.*'
        action: drop
      # Remove database content metrics
      - source_labels: [__name__]
        regex: 'pg_stat_user_.*|pg_.*_query_.*'
        action: drop
      # Sanitize database names completely
      - source_labels: [datname]
        regex: '.*'
        target_label: database_type
        replacement: 'application_database'

  # Redis Monitoring - Cache Security Hardened  
  - job_name: 'redis'
    static_configs:
      - targets: ['redis-exporter:9121']
    scrape_interval: 30s
    metrics_path: /metrics
    scheme: http # Internal network
    # Remove authentication and key information
    metric_relabel_configs:
      - source_labels: [__name__]
        regex: 'redis_config_.*|redis_.*auth.*|redis_key_.*'
        action: drop

  # Elasticsearch Monitoring - Search Engine Secured
  - job_name: 'elasticsearch'
    static_configs:
      - targets: ['elasticsearch:9200']
    scheme: https
    tls_config:
      ca_file: /etc/ssl/prometheus/ca.crt
      insecure_skip_verify: false
      server_name: elasticsearch
    # Use dedicated monitoring user with minimal permissions
    basic_auth:
      username: 'prometheus_readonly'
      password_file: /etc/prometheus/secrets/elasticsearch_monitoring_password
    scrape_interval: 30s
    metrics_path: /_prometheus/metrics
    metric_relabel_configs:
      # Remove cluster security and user information
      - source_labels: [__name__]
        regex: 'elasticsearch_cluster_.*security.*|elasticsearch_.*user.*'
        action: drop

  # AutoDev-AI Application - Maximum Security Integration
  - job_name: 'autodev-ai-secure'
    static_configs:
      - targets: ['host.docker.internal:8080']
    scrape_interval: 15s
    scrape_timeout: 10s
    metrics_path: /metrics
    scheme: https # REQUIRED: TLS encryption
    tls_config:
      ca_file: /etc/ssl/prometheus/ca.crt
      insecure_skip_verify: false
    # Application monitoring with dedicated token
    bearer_token_file: /etc/prometheus/secrets/app_monitoring_token
    relabel_configs:
      - source_labels: [__address__]
        target_label: application
        replacement: 'autodev-ai'
      - target_label: component
        replacement: 'tauri-backend'
      - target_label: security_zone
        replacement: 'application-tier'
    # CRITICAL: Remove ALL user data and credentials from metrics
    metric_relabel_configs:
      # Drop ANY metric containing sensitive keywords
      - source_labels: [__name__]
        regex: '.*_(password|secret|key|token|credential|auth|user|email|api_key)_.*'
        action: drop
      # Drop metrics with sensitive labels
      - source_labels: [__name__]
        regex: 'autodev_ai_.*_(user_|email_|session_|credential_).*'
        action: drop
      # Keep only essential performance metrics
      - source_labels: [__name__]
        regex: 'autodev_ai_(http_requests|response_time|memory_usage|cpu_usage|active_connections)_.*'
        action: keep

# Secure remote write for backup monitoring (optional)
remote_write:
  - url: "https://monitoring-backup.autodev-ai.local/api/v1/write"
    tls_config:
      ca_file: /etc/ssl/prometheus/ca.crt
      cert_file: /etc/ssl/prometheus/cert.pem
      key_file: /etc/ssl/prometheus/key.pem
      insecure_skip_verify: false
    basic_auth:
      username: 'autodev-ai-backup'
      password_file: /etc/prometheus/secrets/remote_write_password
    queue_config:
      # Conservative settings for security
      max_samples_per_send: 500
      max_shards: 3
      capacity: 2500
      batch_send_deadline: 15s
    metadata_config:
      send: false # Don't send metadata for security