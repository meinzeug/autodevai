name: Release Automation

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
          - prerelease
        default: 'patch'
      create_tag:
        description: 'Create git tag'
        required: false
        type: boolean
        default: true
      draft:
        description: 'Create as draft release'
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  discussions: write
  pull-requests: write
  actions: read

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Version bump and tag creation
  version-bump:
    name: Version Bump
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    outputs:
      new-version: ${{ steps.version.outputs.new-version }}
      tag-name: ${{ steps.version.outputs.tag-name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Install dependencies
        run: npm ci

      - name: Bump version
        id: version
        env:
          RELEASE_TYPE: ${{ github.event.inputs.release_type }}
        run: |
          # Current version
          CURRENT_VERSION=$(node -pe "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"
          
          # Bump version using npm
          npm version $RELEASE_TYPE --no-git-tag-version
          
          # Get new version
          NEW_VERSION=$(node -pe "require('./package.json').version")
          echo "New version: $NEW_VERSION"
          
          # Update Cargo.toml version
          sed -i.bak "s/^version = \".*\"/version = \"$NEW_VERSION\"/" src-tauri/Cargo.toml
          rm src-tauri/Cargo.toml.bak
          
          # Update Cargo.lock
          cd src-tauri && cargo update -p neural-bridge-platform && cd ..
          
          # Commit changes
          git add package.json package-lock.json src-tauri/Cargo.toml src-tauri/Cargo.lock
          git commit -m "chore: bump version to v$NEW_VERSION"
          
          # Create tag if requested
          if [[ "${{ github.event.inputs.create_tag }}" == "true" ]]; then
            git tag "v$NEW_VERSION"
            echo "tag-name=v$NEW_VERSION" >> $GITHUB_OUTPUT
          fi
          
          echo "new-version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Push changes
        if: github.event.inputs.create_tag == 'true'
        run: |
          git push origin main
          git push --tags

  # Build release artifacts
  build-release:
    name: Build Release (${{ matrix.platform }})
    runs-on: ${{ matrix.os }}
    needs: version-bump
    if: always() && (needs.version-bump.result == 'success' || needs.version-bump.result == 'skipped')
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: linux-x64
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            args: '--bundles deb,appimage'
            artifact: '*.deb,*.AppImage'
          - platform: linux-arm64
            os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            args: '--bundles deb,appimage'
            artifact: '*.deb,*.AppImage'
          - platform: windows-x64
            os: windows-latest
            target: x86_64-pc-windows-msvc
            args: '--bundles msi,nsis'
            artifact: '*.msi,*.exe'
          - platform: macos-x64
            os: macos-latest
            target: x86_64-apple-darwin
            args: '--bundles dmg,app'
            artifact: '*.dmg,*.app'
          - platform: macos-arm64
            os: macos-latest
            target: aarch64-apple-darwin
            args: '--bundles dmg,app'
            artifact: '*.dmg,*.app'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Install cross-compilation tools (Linux ARM64)
        if: matrix.platform == 'linux-arm64'
        run: |
          sudo apt-get install -y gcc-aarch64-linux-gnu
          echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++" >> $GITHUB_ENV

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: src-tauri
          cache-on-failure: true

      - name: Install dependencies
        run: npm ci

      - name: Build frontend
        run: npm run build

      - name: Build Tauri app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          tagName: ${{ needs.version-bump.outputs.tag-name || github.ref_name }}
          releaseName: 'AutoDevAI Neural Bridge v__VERSION__'
          releaseBody: |
            🚀 **AutoDevAI Neural Bridge Platform Release**
            
            This release includes the latest features, improvements, and security updates.
            
            ## 📦 Installation
            
            Choose the appropriate package for your operating system:
            
            ### Windows
            - **MSI Installer**: `AutoDevAI-*.msi` - Windows Installer package
            - **NSIS Installer**: `AutoDevAI-*.exe` - Standalone executable installer
            
            ### macOS
            - **DMG**: `AutoDevAI-*.dmg` - Disk image for macOS
            - **APP**: `AutoDevAI.app` - Application bundle
            
            ### Linux
            - **DEB**: `AutoDevAI-*.deb` - Debian/Ubuntu package
            - **AppImage**: `AutoDevAI-*.AppImage` - Portable application
            
            ## 🔧 System Requirements
            
            - **Windows**: Windows 10 1903+ (64-bit)
            - **macOS**: macOS 10.15+ (Catalina)
            - **Linux**: Ubuntu 18.04+, Debian 10+, or equivalent
            
            ## 🛡️ Security
            
            All release artifacts are signed and verified. Check the SHA256 checksums below.
            
            ## 📝 What's New
            
            See the full changelog below for detailed information about this release.
            
            ---
            
            Full Changelog: https://github.com/${{ github.repository }}/compare/${{ github.event.before }}...${{ github.ref_name }}
          releaseDraft: ${{ github.event.inputs.draft == 'true' || github.event_name == 'workflow_dispatch' }}
          prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}
          args: ${{ matrix.args }} --target ${{ matrix.target }}
          includeUpdaterJson: true

      - name: Generate checksums
        run: |
          cd src-tauri/target/${{ matrix.target }}/release/bundle/
          find . -type f \( -name "*.deb" -o -name "*.AppImage" -o -name "*.msi" -o -name "*.exe" -o -name "*.dmg" \) -exec sha256sum {} \; > ../../../../../checksums-${{ matrix.platform }}.txt

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ matrix.platform }}
          path: |
            src-tauri/target/${{ matrix.target }}/release/bundle/
            checksums-${{ matrix.platform }}.txt
          retention-days: 90

  # Generate changelog and finalize release
  finalize-release:
    name: Finalize Release
    runs-on: ubuntu-latest
    needs: [version-bump, build-release]
    if: always() && needs.build-release.result == 'success'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts

      - name: Generate changelog
        id: changelog
        run: |
          # Get the latest tag
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            CURRENT_TAG="${{ needs.version-bump.outputs.tag-name }}"
            PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          else
            CURRENT_TAG="${{ github.ref_name }}"
            PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          fi
          
          echo "Current tag: $CURRENT_TAG"
          echo "Previous tag: $PREVIOUS_TAG"
          
          # Generate changelog
          if [[ -n "$PREVIOUS_TAG" ]]; then
            echo "## 📋 Changelog" > changelog.md
            echo "" >> changelog.md
            
            # Get commits since last tag
            git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..$CURRENT_TAG >> changelog.md
            
            # Add sections for different types of changes
            echo "" >> changelog.md
            echo "### 🚀 Features" >> changelog.md
            git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..$CURRENT_TAG --grep="feat" >> changelog.md || echo "- No new features" >> changelog.md
            
            echo "" >> changelog.md
            echo "### 🐛 Bug Fixes" >> changelog.md
            git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..$CURRENT_TAG --grep="fix" >> changelog.md || echo "- No bug fixes" >> changelog.md
            
            echo "" >> changelog.md
            echo "### 📚 Documentation" >> changelog.md
            git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..$CURRENT_TAG --grep="docs" >> changelog.md || echo "- No documentation changes" >> changelog.md
            
            echo "" >> changelog.md
            echo "### 🔧 Maintenance" >> changelog.md
            git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..$CURRENT_TAG --grep="chore\|refactor" >> changelog.md || echo "- No maintenance changes" >> changelog.md
          else
            echo "## 📋 Initial Release" > changelog.md
            echo "" >> changelog.md
            echo "This is the initial release of AutoDevAI Neural Bridge Platform." >> changelog.md
          fi

      - name: Consolidate checksums
        run: |
          echo "# SHA256 Checksums" > consolidated-checksums.txt
          echo "" >> consolidated-checksums.txt
          find release-artifacts -name "checksums-*.txt" -exec cat {} \; >> consolidated-checksums.txt

      - name: Update release with changelog and checksums
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: AutoDevAI Neural Bridge ${{ github.ref_name }}
          body_path: changelog.md
          files: |
            release-artifacts/**/*
            consolidated-checksums.txt
          append_body: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Discussion
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        uses: actions/github-script@v7
        with:
          script: |
            const tagName = '${{ github.ref_name }}';
            const title = `Release ${tagName} - AutoDevAI Neural Bridge Platform`;
            const body = `
            🎉 **AutoDevAI Neural Bridge Platform ${tagName} is now available!**
            
            ## 📦 Download
            
            Get the latest release from the [Releases page](https://github.com/${{ github.repository }}/releases/tag/${tagName}).
            
            ## 🆕 What's New
            
            Check out the [changelog](https://github.com/${{ github.repository }}/releases/tag/${tagName}) for detailed information about this release.
            
            ## 🤔 Questions or Issues?
            
            - 🐛 Found a bug? [Open an issue](https://github.com/${{ github.repository }}/issues/new)
            - 💡 Have a feature request? [Start a discussion](https://github.com/${{ github.repository }}/discussions/new)
            - 📖 Need help? Check out our [documentation](https://github.com/${{ github.repository }}#readme)
            
            ## 🙏 Thank You
            
            Thanks to all contributors who made this release possible!
            `;
            
            await github.rest.teams.addOrUpdateRepoPermissions({
              owner: context.repo.owner,
              repo: context.repo.repo,
              team_slug: 'discussions',
              permission: 'write'
            });