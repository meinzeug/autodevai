name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    tags: ['v*']
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '22'
  RUST_VERSION: 'stable'

jobs:
  # Security and dependency checks
  security:
    name: Security Audit
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Security audit
        run: npm audit --audit-level moderate

      - name: Check for vulnerabilities
        run: |
          npx audit-ci --moderate
          npx better-npm-audit audit

      - name: Create issue on failure
        if: failure()
        uses: ./.github/actions/create-failure-issue
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          job-name: 'Security Audit'
          workflow-name: 'CI/CD Pipeline'
          error-message: 'Security vulnerabilities detected in dependencies'
          labels: 'ci-failure,security,automated'

  # Linting and formatting
  lint:
    name: Lint and Format
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Type check
        run: npm run typecheck

      - name: Lint
        run: npm run lint:strict

      - name: Format check
        run: npm run format:check

      - name: Create issue on failure
        if: failure()
        uses: ./.github/actions/create-failure-issue
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          job-name: 'Lint and Format'
          workflow-name: 'CI/CD Pipeline'
          error-message: 'Linting or formatting checks failed'
          labels: 'ci-failure,lint,automated'

  # Unit and integration tests
  test:
    name: Unit & Integration Tests
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        node-version: [22]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

      - name: Create issue on failure
        if: failure()
        uses: ./.github/actions/create-failure-issue
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          job-name: 'Unit & Integration Tests'
          workflow-name: 'CI/CD Pipeline'
          error-message: 'Unit or integration tests failed'
          labels: 'ci-failure,testing,automated'

  # E2E tests
  e2e:
    name: E2E Tests
    runs-on: ubuntu-22.04
    needs: [lint, test]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: Run E2E tests
        run: npm run test:e2e

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

      - name: Create issue on failure
        if: failure()
        uses: ./.github/actions/create-failure-issue
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          job-name: 'E2E Tests'
          workflow-name: 'CI/CD Pipeline'
          error-message: 'End-to-end tests failed'
          labels: 'ci-failure,e2e-testing,automated'

  # Build frontend
  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-22.04
    needs: [lint, test]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Build frontend
        run: npm run build:production

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: dist/
          retention-days: 7

      - name: Create issue on failure
        if: failure()
        uses: ./.github/actions/create-failure-issue
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          job-name: 'Build Frontend'
          workflow-name: 'CI/CD Pipeline'
          error-message: 'Frontend build failed'
          labels: 'ci-failure,build,frontend,automated'

  # Build Tauri app
  build-tauri:
    name: Build Tauri App
    needs: [lint, test]
    strategy:
      fail-fast: false
      matrix:
        platform: [ubuntu-22.04]
    runs-on: ${{ matrix.platform }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}

      - name: Install dependencies (ubuntu only)
        if: contains(matrix.platform, 'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Install frontend dependencies
        run: npm install

      - name: Build Tauri app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: app-v__VERSION__
          releaseName: 'AutoDev-AI Neural Bridge v__VERSION__'
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: true
          prerelease: false
          args: '--target x86_64-unknown-linux-gnu'

      - name: Create issue on failure
        if: failure()
        uses: ./.github/actions/create-failure-issue
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          job-name: 'Build Tauri App (${{ matrix.platform }})'
          workflow-name: 'CI/CD Pipeline'
          error-message: 'Tauri app build failed on ${{ matrix.platform }}'
          labels: 'ci-failure,build,tauri,${{ matrix.platform }},automated'

  # Performance tests
  performance:
    name: Performance Tests
    runs-on: ubuntu-22.04
    needs: [build-frontend]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: dist/

      - name: Lighthouse CI
        run: |
          npm install -g @lhci/cli@0.12.x
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  # Docker build and push
  docker:
    name: Build Docker Images
    runs-on: ubuntu-22.04
    needs: [build-frontend]
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        if: github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: autodevai/neural-bridge
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to staging/production
  deploy:
    name: Deploy Application
    runs-on: ubuntu-22.04
    needs: [e2e, build-tauri, docker]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    steps:
      - uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add your deployment scripts here
        env:
          DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
          PRODUCTION_URL: ${{ secrets.PRODUCTION_URL }}
