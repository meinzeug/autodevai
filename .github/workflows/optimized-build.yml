name: Optimized Build Pipeline

on:
  push:
    branches: [main, develop]
    tags: ['v*']
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      build_all_platforms:
        description: 'Build for all platforms'
        required: false
        default: true
        type: boolean
      release_mode:
        description: 'Build in release mode'
        required: false
        default: false
        type: boolean

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  pull-requests: write
  issues: write
  actions: read

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Use reusable workflows for consistency
  test-frontend:
    name: Frontend Tests
    uses: ./.github/workflows/templates/reusable-test.yml
    with:
      test-type: 'unit'
      node-version: '18'
      timeout-minutes: 15
      upload-coverage: true

  test-backend:
    name: Backend Tests
    uses: ./.github/workflows/templates/reusable-test.yml
    with:
      test-type: 'rust-unit'
      rust-version: 'stable'
      timeout-minutes: 20

  test-integration:
    name: Integration Tests
    uses: ./.github/workflows/templates/reusable-test.yml
    with:
      test-type: 'integration'
      timeout-minutes: 25
      upload-coverage: true

  # Smart build matrix - only build for changed platforms or all on main
  determine-build-matrix:
    name: Determine Build Matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.matrix.outputs.include }}
      should-build: ${{ steps.matrix.outputs.should-build }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine build matrix
        id: matrix
        run: |
          # Default matrix for all platforms
          FULL_MATRIX='[
            {"platform": "linux", "os": "ubuntu-latest", "target": "x86_64-unknown-linux-gnu", "args": "--bundles deb,appimage"},
            {"platform": "windows", "os": "windows-latest", "target": "x86_64-pc-windows-msvc", "args": "--bundles msi,nsis"},
            {"platform": "macos", "os": "macos-latest", "target": "x86_64-apple-darwin", "args": "--bundles dmg,app"}
          ]'
          
          # Minimal matrix for PR builds (Linux only for speed)
          PR_MATRIX='[
            {"platform": "linux", "os": "ubuntu-latest", "target": "x86_64-unknown-linux-gnu", "args": "--bundles deb"}
          ]'
          
          # Determine which matrix to use
          if [[ "${{ github.event_name }}" == "push" && ("${{ github.ref }}" == "refs/heads/main" || "${{ github.ref }}" =~ ^refs/tags/v) ]]; then
            echo "include=$FULL_MATRIX" >> $GITHUB_OUTPUT
            echo "should-build=true" >> $GITHUB_OUTPUT
            echo "Building for all platforms (main branch or tag)"
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.build_all_platforms }}" == "true" ]]; then
            echo "include=$FULL_MATRIX" >> $GITHUB_OUTPUT
            echo "should-build=true" >> $GITHUB_OUTPUT
            echo "Building for all platforms (manual trigger)"
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "include=$PR_MATRIX" >> $GITHUB_OUTPUT
            echo "should-build=true" >> $GITHUB_OUTPUT
            echo "Building for Linux only (PR)"
          else
            echo "include=[]" >> $GITHUB_OUTPUT
            echo "should-build=false" >> $GITHUB_OUTPUT
            echo "Skipping build"
          fi

  # Optimized build using reusable workflow
  build-optimized:
    name: Build
    needs: [test-frontend, test-backend, determine-build-matrix]
    if: needs.determine-build-matrix.outputs.should-build == 'true'
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.determine-build-matrix.outputs.matrix) }}
    uses: ./.github/workflows/templates/reusable-build.yml
    with:
      platform: ${{ matrix.platform }}
      rust-target: ${{ matrix.target }}
      build-args: ${{ matrix.args }}
      cache-key: optimized-${{ matrix.platform }}

  # Create release if this is a tag
  create-release:
    name: Create Release
    needs: [build-optimized]
    if: startsWith(github.ref, 'refs/tags/v') && needs.build-optimized.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          find release-artifacts -type f \( -name "*.deb" -o -name "*.AppImage" -o -name "*.dmg" -o -name "*.msi" -o -name "*.exe" \) -exec cp {} release-assets/ \;
          
          # Generate checksums
          cd release-assets
          sha256sum * > checksums.txt
          cd ..
          
          ls -la release-assets/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: AutoDevAI ${{ github.ref_name }}
          body: |
            🚀 **AutoDevAI Neural Bridge Platform ${{ github.ref_name }}**
            
            ## 📦 Downloads
            
            Choose the appropriate package for your operating system:
            
            - **Windows**: `.msi` or `.exe` installer
            - **macOS**: `.dmg` installer
            - **Linux**: `.deb` package or `.AppImage`
            
            ## 🔐 Verification
            
            All files include SHA256 checksums in `checksums.txt`.
            
            ## 📝 Changes
            
            For detailed changes, see the [full changelog](https://github.com/${{ github.repository }}/compare/${{ github.event.before }}...${{ github.ref_name }}).
          files: |
            release-assets/*
          draft: false
          prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Post-build summary
  build-summary:
    name: Build Summary
    needs: [test-frontend, test-backend, test-integration, build-optimized]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Generate build summary
        run: |
          echo "# 🏗️ Build Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Test Type | Status | Coverage |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|----------|" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend | ${{ needs.test-frontend.result == 'success' && '✅' || '❌' }} | ${{ needs.test-frontend.outputs.coverage-percentage || 'N/A' }}% |" >> $GITHUB_STEP_SUMMARY
          echo "| Backend | ${{ needs.test-backend.result == 'success' && '✅' || '❌' }} | N/A |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration | ${{ needs.test-integration.result == 'success' && '✅' || '❌' }} | ${{ needs.test-integration.outputs.coverage-percentage || 'N/A' }}% |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Build Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Platform | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| All Platforms | ${{ needs.build-optimized.result == 'success' && '✅ Built' || needs.build-optimized.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ startsWith(github.ref, 'refs/tags/v') }}" == "true" ]]; then
            echo "## 🚀 Release" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "This is a tagged release! Assets will be available in the [Releases page](https://github.com/${{ github.repository }}/releases)." >> $GITHUB_STEP_SUMMARY
          fi