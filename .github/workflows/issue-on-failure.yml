name: Issue Creation on Failures

on:
  workflow_run:
    workflows: ["CI/CD Pipeline", "Security Scanning", "Release Automation"]
    types: [completed]
    branches: [main, develop]

permissions:
  issues: write
  actions: read
  contents: read

jobs:
  create-issue-on-failure:
    name: Create Issue on Workflow Failure
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'failure' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get workflow run details
        id: workflow
        uses: actions/github-script@v7
        with:
          script: |
            const workflowRun = context.payload.workflow_run;
            const workflow = await github.rest.actions.getWorkflow({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: workflowRun.workflow_id
            });
            
            // Get failed jobs
            const jobs = await github.rest.actions.listJobsForWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: workflowRun.id
            });
            
            const failedJobs = jobs.data.jobs.filter(job => job.conclusion === 'failure');
            
            return {
              workflowName: workflow.data.name,
              workflowUrl: workflowRun.html_url,
              runId: workflowRun.id,
              headSha: workflowRun.head_sha,
              headBranch: workflowRun.head_branch,
              actor: workflowRun.actor.login,
              createdAt: workflowRun.created_at,
              updatedAt: workflowRun.updated_at,
              failedJobs: failedJobs.map(job => ({
                name: job.name,
                url: job.html_url,
                steps: job.steps.filter(step => step.conclusion === 'failure').map(step => ({
                  name: step.name,
                  number: step.number,
                  conclusion: step.conclusion
                }))
              }))
            };

      - name: Download workflow logs
        id: logs
        uses: actions/github-script@v7
        with:
          script: |
            const workflowRunId = ${{ github.event.workflow_run.id }};
            
            try {
              const logs = await github.rest.actions.downloadWorkflowRunLogs({
                owner: context.repo.owner,
                repo: context.repo.repo,
                run_id: workflowRunId
              });
              
              // The logs are returned as a zip file buffer
              // We'll just indicate that logs are available
              return {
                available: true,
                url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${workflowRunId}`
              };
            } catch (error) {
              console.log('Could not download logs:', error.message);
              return {
                available: false,
                error: error.message
              };
            }

      - name: Check for existing issue
        id: existing
        uses: actions/github-script@v7
        with:
          script: |
            const workflowName = ${{ steps.workflow.outputs.result }}.workflowName;
            const headSha = ${{ steps.workflow.outputs.result }}.headSha;
            
            // Search for existing issues with the same workflow and commit
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'workflow-failure,automated',
              per_page: 100
            });
            
            const existingIssue = issues.data.find(issue => 
              issue.title.includes(workflowName) && 
              issue.body.includes(headSha.substring(0, 7))
            );
            
            return existingIssue ? existingIssue.number : null;

      - name: Get commit details
        id: commit
        uses: actions/github-script@v7
        with:
          script: |
            const headSha = ${{ steps.workflow.outputs.result }}.headSha;
            
            const commit = await github.rest.repos.getCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: headSha
            });
            
            return {
              message: commit.data.commit.message,
              author: commit.data.commit.author.name,
              authorEmail: commit.data.commit.author.email,
              url: commit.data.html_url
            };

      - name: Create or update issue
        uses: actions/github-script@v7
        env:
          WORKFLOW_DATA: ${{ steps.workflow.outputs.result }}
          LOGS_DATA: ${{ steps.logs.outputs.result }}
          COMMIT_DATA: ${{ steps.commit.outputs.result }}
          EXISTING_ISSUE: ${{ steps.existing.outputs.result }}
        with:
          script: |
            const workflowData = JSON.parse(process.env.WORKFLOW_DATA);
            const logsData = JSON.parse(process.env.LOGS_DATA);
            const commitData = JSON.parse(process.env.COMMIT_DATA);
            const existingIssue = process.env.EXISTING_ISSUE !== 'null' ? parseInt(process.env.EXISTING_ISSUE) : null;
            
            // Format failed jobs information
            const failedJobsInfo = workflowData.failedJobs.map(job => {
              const stepsInfo = job.steps.length > 0 
                ? job.steps.map(step => `    - ‚ùå Step ${step.number}: ${step.name}`).join('\n')
                : '    - No specific step failures detected';
              
              return `  - **${job.name}**
            ${stepsInfo}
            [View job logs](${job.url})`;
            }).join('\n');
            
            const title = `üö® Workflow Failure: ${workflowData.workflowName} (${workflowData.headSha.substring(0, 7)})`;
            
            const body = `## üö® Workflow Failure Alert
            
            The **${workflowData.workflowName}** workflow has failed on branch \`${workflowData.headBranch}\`.
            
            ### üìä Failure Details
            
            | Field | Value |
            |-------|-------|
            | **Workflow** | [${workflowData.workflowName}](${workflowData.workflowUrl}) |
            | **Run ID** | \`${workflowData.runId}\` |
            | **Branch** | \`${workflowData.headBranch}\` |
            | **Commit** | [\`${workflowData.headSha.substring(0, 7)}\`](${commitData.url}) |
            | **Author** | ${commitData.author} |
            | **Triggered by** | @${workflowData.actor} |
            | **Failed at** | ${new Date(workflowData.updatedAt).toLocaleString()} |
            
            ### üìù Commit Information
            
            **Message:** ${commitData.message.split('\n')[0]}
            
            **Full commit:** ${commitData.url}
            
            ### ‚ùå Failed Jobs
            
            ${failedJobsInfo}
            
            ### üîç Debugging Information
            
            ${logsData.available 
              ? `üìã **Workflow logs:** [Download here](${logsData.url})`
              : `‚ö†Ô∏è **Workflow logs:** Not available (${logsData.error || 'Unknown error'})`
            }
            
            ### üõ†Ô∏è Next Steps
            
            1. **Review the failed jobs** listed above
            2. **Check the workflow logs** for detailed error messages
            3. **Examine the failing commit** for potential issues
            4. **Fix the underlying issue** and push a new commit
            5. **Re-run the workflow** if needed
            
            ### üè∑Ô∏è Auto-generated Tags
            
            - \`workflow-failure\` - Indicates this is an automated workflow failure report
            - \`${workflowData.workflowName.toLowerCase().replace(/[^a-z0-9]+/g, '-')}\` - Specific workflow that failed
            - \`branch:${workflowData.headBranch}\` - Branch where the failure occurred
            
            ---
            
            ü§ñ This issue was automatically created by the Issue Creation on Failures workflow.
            
            **Workflow Run:** ${workflowData.workflowUrl}
            **Created:** ${new Date().toISOString()}`;
            
            const labels = [
              'workflow-failure',
              'automated',
              'bug',
              workflowData.workflowName.toLowerCase().replace(/[^a-z0-9]+/g, '-'),
              `branch:${workflowData.headBranch}`
            ];
            
            if (existingIssue) {
              // Update existing issue
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existingIssue,
                body: `## üîÑ Additional Failure
                
                The workflow failed again with the same commit. See updated details above.
                
                **New failure time:** ${new Date(workflowData.updatedAt).toLocaleString()}
                **Workflow run:** ${workflowData.workflowUrl}`
              });
              
              // Update labels
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existingIssue,
                labels: labels
              });
              
              console.log(`Updated existing issue #${existingIssue}`);
            } else {
              // Create new issue
              const issue = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: labels,
                assignees: [workflowData.actor] // Assign to the person who triggered the workflow
              });
              
              console.log(`Created new issue #${issue.data.number}`);
            }

      - name: Notify via comment (if PR)
        if: ${{ github.event.workflow_run.event == 'pull_request' }}
        uses: actions/github-script@v7
        with:
          script: |
            const workflowData = JSON.parse(process.env.WORKFLOW_DATA);
            
            // Find the PR associated with this workflow run
            const prs = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: `${context.repo.owner}:${workflowData.headBranch}`,
              state: 'open'
            });
            
            if (prs.data.length > 0) {
              const pr = prs.data[0];
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: `## ‚ö†Ô∏è Workflow Failure
                
                The **${workflowData.workflowName}** workflow has failed for this PR.
                
                üîç **Details:** [View workflow run](${workflowData.workflowUrl})
                üìã **Issue:** An automated issue has been created to track this failure
                
                Please check the workflow logs and fix any issues before merging.`
              });
            }
        env:
          WORKFLOW_DATA: ${{ steps.workflow.outputs.result }}

  # Cleanup old failure issues
  cleanup-old-issues:
    name: Cleanup Old Failure Issues
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Close resolved failure issues
        uses: actions/github-script@v7
        with:
          script: |
            const sevenDaysAgo = new Date();
            sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);
            
            // Get all open workflow failure issues older than 7 days
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'workflow-failure,automated',
              since: sevenDaysAgo.toISOString(),
              per_page: 100
            });
            
            for (const issue of issues.data) {
              const issueDate = new Date(issue.created_at);
              
              // Close issues older than 7 days
              if (issueDate < sevenDaysAgo) {
                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  state: 'closed'
                });
                
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  body: `ü§ñ **Auto-closing stale workflow failure issue**
                  
                  This issue has been automatically closed because it's older than 7 days.
                  
                  If the workflow is still failing, a new issue will be created automatically.`
                });
                
                console.log(`Closed stale issue #${issue.number}: ${issue.title}`);
              }
            }