name: Create Issue on Workflow Failure

on:
  workflow_run:
    workflows:
      - "Main CI/CD Pipeline"
      - "PR Validation"
      - "Release Pipeline"
    types:
      - completed

permissions:
  issues: write
  contents: read

jobs:
  create-issue-on-failure:
    name: Create Issue if Workflow Failed
    runs-on: ubuntu-22.04
    if: ${{ github.event.workflow_run.conclusion == 'failure' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for existing issue
        id: check-issue
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const workflow_name = '${{ github.event.workflow_run.name }}';
            const run_id = '${{ github.event.workflow_run.id }}';
            
            // Search for existing open issues
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'ci-failure,automated'
            });
            
            // Check if issue already exists for this workflow
            const existingIssue = issues.data.find(issue => 
              issue.title.includes(workflow_name) && 
              issue.body.includes(run_id)
            );
            
            if (existingIssue) {
              console.log(`Issue already exists: #${existingIssue.number}`);
              return existingIssue.number;
            }
            
            return null;

      - name: Create failure issue
        if: steps.check-issue.outputs.result == 'null'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const workflow_name = '${{ github.event.workflow_run.name }}';
            const workflow_url = '${{ github.event.workflow_run.html_url }}';
            const run_id = '${{ github.event.workflow_run.id }}';
            const run_number = '${{ github.event.workflow_run.run_number }}';
            const commit_sha = '${{ github.event.workflow_run.head_sha }}';
            const commit_message = '${{ github.event.workflow_run.head_commit.message }}';
            const author = '${{ github.event.workflow_run.head_commit.author.name }}';
            const branch = '${{ github.event.workflow_run.head_branch }}';
            const event_type = '${{ github.event.workflow_run.event }}';
            const created_at = '${{ github.event.workflow_run.created_at }}';
            
            // Get workflow run details
            const run = await github.rest.actions.getWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: run_id
            });
            
            // Get failed jobs
            const jobs = await github.rest.actions.listJobsForWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: run_id,
              filter: 'latest'
            });
            
            const failedJobs = jobs.data.jobs.filter(job => job.conclusion === 'failure');
            
            // Build error details
            let errorDetails = '';
            for (const job of failedJobs) {
              errorDetails += `\n### ‚ùå Failed Job: ${job.name}\n`;
              errorDetails += `- **Status**: ${job.status}\n`;
              errorDetails += `- **Started**: ${job.started_at}\n`;
              errorDetails += `- **Duration**: ${Math.round((new Date(job.completed_at) - new Date(job.started_at)) / 1000)}s\n`;
              errorDetails += `- **URL**: ${job.html_url}\n`;
              
              // Get failed steps
              const failedSteps = job.steps.filter(step => step.conclusion === 'failure');
              if (failedSteps.length > 0) {
                errorDetails += `\n**Failed Steps:**\n`;
                for (const step of failedSteps) {
                  errorDetails += `- ‚ö†Ô∏è ${step.name} (${step.conclusion})\n`;
                }
              }
            }
            
            // Create issue title and body
            const issueTitle = `üö® CI/CD Failure: ${workflow_name} (Run #${run_number})`;
            
            const issueBody = `## üî¥ Workflow Failure Detected
            
            The **${workflow_name}** workflow has failed and requires attention.
            
            ### üìä Workflow Information
            - **Workflow**: ${workflow_name}
            - **Run Number**: #${run_number}
            - **Run ID**: ${run_id}
            - **Branch**: \`${branch}\`
            - **Event**: ${event_type}
            - **Created**: ${created_at}
            - **URL**: [View Workflow Run](${workflow_url})
            
            ### üíª Commit Information
            - **SHA**: \`${commit_sha.substring(0, 7)}\`
            - **Author**: ${author}
            - **Message**: ${commit_message.split('\n')[0]}
            
            ${errorDetails}
            
            ### üîß Suggested Actions
            1. Review the [failed workflow run](${workflow_url})
            2. Check the error logs for specific failure reasons
            3. Fix the identified issues
            4. Push the fixes to trigger a new workflow run
            5. Close this issue once the workflow passes
            
            ### üè∑Ô∏è Labels
            This issue has been automatically labeled with:
            - \`ci-failure\`: Indicates a CI/CD pipeline failure
            - \`automated\`: Created by automated workflow
            - \`priority-high\`: Requires immediate attention
            
            ### ü§ñ Automation
            This issue was automatically created by the CI/CD failure detection system.
            
            ---
            *Generated at: ${new Date().toISOString()}*
            *Workflow Run: [${run_id}](${workflow_url})*`;
            
            // Create the issue
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: issueTitle,
              body: issueBody,
              labels: ['ci-failure', 'automated', 'priority-high', 'bug'],
              assignees: []
            });
            
            console.log(`Created issue #${issue.data.number}: ${issue.data.html_url}`);
            
            // Add comment with additional context if needed
            if (failedJobs.length > 1) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.data.number,
                body: `‚ö†Ô∏è **Multiple job failures detected** (${failedJobs.length} jobs failed)\n\nThis indicates a systemic issue that may require broader investigation.`
              });
            }

      - name: Notify about existing issue
        if: steps.check-issue.outputs.result != 'null'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue_number = ${{ steps.check-issue.outputs.result }};
            const workflow_url = '${{ github.event.workflow_run.html_url }}';
            const run_number = '${{ github.event.workflow_run.run_number }}';
            
            // Add comment to existing issue
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue_number,
              body: `üîÑ **Another failure detected**\n\nWorkflow run #${run_number} has also failed.\n[View Workflow Run](${workflow_url})\n\n*Failure detected at: ${new Date().toISOString()}*`
            });
            
            console.log(`Updated existing issue #${issue_number}`);