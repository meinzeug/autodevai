name: Dependency Security Scan

on:
  schedule:
    # Run weekly on Mondays at 09:00 UTC
    - cron: '0 9 * * 1'
  push:
    branches: [ main, develop ]
    paths:
      - 'package.json'
      - 'package-lock.json'
      - 'src-tauri/Cargo.toml'
      - 'src-tauri/Cargo.lock'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'package.json'
      - 'package-lock.json'
      - 'src-tauri/Cargo.toml'
      - 'src-tauri/Cargo.lock'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  npm-security-scan:
    name: NPM Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run npm audit
        id: npm-audit
        run: |
          # Create audit report
          npm audit --audit-level=moderate --json > npm-audit-report.json || true
          
          # Check for vulnerabilities
          if npm audit --audit-level=high; then
            echo "No high-severity vulnerabilities found"
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "High-severity vulnerabilities found"
            echo "status=failure" >> $GITHUB_OUTPUT
            npm audit --audit-level=high
          fi
      
      - name: Upload npm audit report
        uses: actions/upload-artifact@v4
        with:
          name: npm-audit-report
          path: npm-audit-report.json
          retention-days: 30
      
      - name: Create npm security issue
        if: steps.npm-audit.outputs.status == 'failure' && github.event_name == 'schedule'
        uses: actions/github-script@v8
        with:
          script: |
            const fs = require('fs');
            const auditReport = JSON.parse(fs.readFileSync('npm-audit-report.json', 'utf8'));
            
            const vulnerabilities = auditReport.vulnerabilities || {};
            const highSeverity = Object.entries(vulnerabilities)
              .filter(([_, vuln]) => vuln.severity === 'high' || vuln.severity === 'critical')
              .map(([name, vuln]) => `- **${name}**: ${vuln.severity} - ${vuln.via.join(', ')}`);
            
            if (highSeverity.length > 0) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: '🚨 High-severity npm vulnerabilities detected',
                body: `## Security Alert\n\nHigh-severity vulnerabilities found in npm dependencies:\n\n${highSeverity.join('\n')}\n\n**Action Required**: Review and update affected dependencies.\n\n**Audit Report**: Check the workflow artifacts for detailed report.`,
                labels: ['security', 'dependencies', 'urgent']
              });
            }

  cargo-security-scan:
    name: Cargo Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install cargo-audit
        run: cargo install cargo-audit
      
      - name: Run cargo audit
        id: cargo-audit
        working-directory: src-tauri
        run: |
          # Create audit report
          cargo audit --json > ../cargo-audit-report.json || true
          
          # Check for vulnerabilities
          if cargo audit; then
            echo "No vulnerabilities found in Rust dependencies"
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "Vulnerabilities found in Rust dependencies"
            echo "status=failure" >> $GITHUB_OUTPUT
            cargo audit
          fi
      
      - name: Upload cargo audit report
        uses: actions/upload-artifact@v4
        with:
          name: cargo-audit-report
          path: cargo-audit-report.json
          retention-days: 30
      
      - name: Create cargo security issue
        if: steps.cargo-audit.outputs.status == 'failure' && github.event_name == 'schedule'
        uses: actions/github-script@v8
        with:
          script: |
            const fs = require('fs');
            try {
              const auditReport = JSON.parse(fs.readFileSync('cargo-audit-report.json', 'utf8'));
              
              if (auditReport.vulnerabilities && auditReport.vulnerabilities.list.length > 0) {
                const vulns = auditReport.vulnerabilities.list.map(vuln => 
                  `- **${vuln.package.name}**: ${vuln.advisory.id} - ${vuln.advisory.title}`
                );
                
                await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: '🚨 Rust dependency vulnerabilities detected',
                  body: `## Security Alert\n\nVulnerabilities found in Rust dependencies:\n\n${vulns.join('\n')}\n\n**Action Required**: Review and update affected dependencies.\n\n**Audit Report**: Check the workflow artifacts for detailed report.`,
                  labels: ['security', 'dependencies', 'rust', 'urgent']
                });
              }
            } catch (error) {
              console.log('Could not parse cargo audit report:', error.message);
            }

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: high
          allow-licenses: MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC, CC0-1.0
          deny-licenses: GPL-2.0, GPL-3.0, AGPL-1.0, AGPL-3.0, LGPL-2.0, LGPL-2.1, LGPL-3.0
          comment-summary-in-pr: on-failure

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [npm-security-scan, cargo-security-scan]
    if: always()
    
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: '*-audit-report'
          merge-multiple: true
      
      - name: Generate security summary
        run: |
          echo "# Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # NPM Audit Results
          echo "## NPM Dependencies" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.npm-security-scan.result }}" == "success" ]; then
            echo "✅ No high-severity vulnerabilities found" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ High-severity vulnerabilities detected" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Cargo Audit Results
          echo "## Rust Dependencies" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.cargo-security-scan.result }}" == "success" ]; then
            echo "✅ No vulnerabilities found" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Vulnerabilities detected" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Recommendations
          echo "## Recommendations" >> $GITHUB_STEP_SUMMARY
          echo "- Review audit reports in workflow artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- Update vulnerable dependencies promptly" >> $GITHUB_STEP_SUMMARY
          echo "- Monitor Dependabot PRs for security updates" >> $GITHUB_STEP_SUMMARY
          echo "- Enable auto-merge for patch-level security fixes" >> $GITHUB_STEP_SUMMARY