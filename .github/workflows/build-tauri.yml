name: Tauri Cross-Platform Build

on:
  push:
    branches: [main]
    tags: ['v*']
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
  TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}

jobs:
  build-tauri:
    strategy:
      fail-fast: false
      matrix:
        platform:
          - os: ubuntu-latest
            rust_target: x86_64-unknown-linux-gnu
            arch: x64
            name: linux-x64
          - os: ubuntu-latest
            rust_target: aarch64-unknown-linux-gnu
            arch: arm64
            name: linux-arm64
          - os: windows-latest
            rust_target: x86_64-pc-windows-msvc
            arch: x64
            name: windows-x64
          - os: windows-latest
            rust_target: aarch64-pc-windows-msvc
            arch: arm64
            name: windows-arm64
          - os: macos-latest
            rust_target: x86_64-apple-darwin
            arch: x64
            name: macos-x64
          - os: macos-latest
            rust_target: aarch64-apple-darwin
            arch: arm64
            name: macos-arm64

    runs-on: ${{ matrix.platform.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform.rust_target }}

      - name: Cache cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            src-tauri/target
          key: ${{ runner.os }}-${{ matrix.platform.arch }}-cargo-${{ hashFiles('src-tauri/Cargo.lock') }}

      - name: Install Linux dependencies
        if: matrix.platform.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.0-dev \
            libappindicator3-dev \
            librsvg2-dev \
            patchelf

      - name: Install ARM64 cross-compilation tools (Linux)
        if: matrix.platform.os == 'ubuntu-latest' && matrix.platform.arch == 'arm64'
        run: |
          sudo apt-get install -y gcc-aarch64-linux-gnu
          echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++" >> $GITHUB_ENV

      - name: Install frontend dependencies
        run: npm install

      - name: Build frontend
        run: npm run build

      - name: Build Tauri application
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ENABLE_CODE_SIGNING: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
        with:
          tagName: ${{ github.ref_name }}
          releaseName: 'AutoDev-AI v__VERSION__'
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: true
          prerelease: false
          args: --target ${{ matrix.platform.rust_target }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: tauri-${{ matrix.platform.name }}
          path: |
            src-tauri/target/${{ matrix.platform.rust_target }}/release/bundle/
            src-tauri/target/${{ matrix.platform.rust_target }}/release/*.exe
            src-tauri/target/${{ matrix.platform.rust_target }}/release/autodev-ai
          retention-days: 30

  create-universal-macos:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: macos-latest
    needs: build-tauri
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download x64 artifact
        uses: actions/download-artifact@v3
        with:
          name: tauri-macos-x64
          path: ./artifacts/x64

      - name: Download ARM64 artifact
        uses: actions/download-artifact@v3
        with:
          name: tauri-macos-arm64
          path: ./artifacts/arm64

      - name: Create universal binary
        run: |
          mkdir -p ./artifacts/universal
          lipo -create \
            ./artifacts/x64/AutoDev-AI.app/Contents/MacOS/AutoDev-AI \
            ./artifacts/arm64/AutoDev-AI.app/Contents/MacOS/AutoDev-AI \
            -output ./artifacts/universal/AutoDev-AI

          # Copy one of the app bundles and replace the binary
          cp -R ./artifacts/x64/AutoDev-AI.app ./artifacts/universal/
          cp ./artifacts/universal/AutoDev-AI ./artifacts/universal/AutoDev-AI.app/Contents/MacOS/

      - name: Upload universal binary
        uses: actions/upload-artifact@v3
        with:
          name: tauri-macos-universal
          path: ./artifacts/universal/AutoDev-AI.app
          retention-days: 30

  security-scan-builds:
    runs-on: ubuntu-latest
    needs: build-tauri
    if: github.event_name == 'pull_request'
    steps:
      - name: Download Linux build
        uses: actions/download-artifact@v3
        with:
          name: tauri-linux-x64
          path: ./build-artifacts

      - name: Scan for vulnerabilities
        run: |
          # Install scanning tools
          curl -L https://github.com/securecodewarrior/github-action-add-sarif/releases/download/v1.0.0/add-sarif-linux-amd64 -o add-sarif
          chmod +x add-sarif

          # Basic file scanning
          find ./build-artifacts -type f -exec file {} \;

          # Check for suspicious patterns
          echo "Scanning for potential security issues..."
          find ./build-artifacts -type f -name "*.so" -o -name "*.dylib" -o -name "*.dll" | head -10

  performance-benchmarks:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    needs: build-tauri
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: tauri-${{ matrix.os == 'ubuntu-latest' && 'linux-x64' || matrix.os == 'windows-latest' && 'windows-x64' || 'macos-x64' }}
          path: ./app

      - name: Setup performance testing
        run: |
          echo "Setting up performance benchmarks for ${{ matrix.os }}"

      - name: Run startup time benchmark
        timeout-minutes: 5
        run: |
          # Platform-specific startup time testing
          echo "Running startup benchmarks..."

      - name: Memory usage benchmark
        timeout-minutes: 5
        run: |
          echo "Running memory usage tests..."

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results-${{ matrix.os }}
          path: ./performance-results/
          retention-days: 7
