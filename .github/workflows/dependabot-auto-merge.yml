name: Dependabot Auto-Merge

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: write
  pull-requests: write
  checks: read

jobs:
  dependabot-auto-merge:
    runs-on: ubuntu-latest
    if: github.actor == 'dependabot[bot]'
    
    steps:
      - name: Dependabot metadata
        id: metadata
        uses: dependabot/fetch-metadata@v2
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"
      
      - name: Wait for CI checks
        uses: fountainhead/action-wait-for-check@v1.2.0
        id: wait-for-ci
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          checkName: "CI"
          ref: ${{ github.event.pull_request.head.sha }}
          timeoutSeconds: 1800 # 30 minutes
          intervalSeconds: 30
      
      - name: Wait for tests
        uses: fountainhead/action-wait-for-check@v1.2.0
        id: wait-for-tests
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          checkName: "Test"
          ref: ${{ github.event.pull_request.head.sha }}
          timeoutSeconds: 1800 # 30 minutes
          intervalSeconds: 30
      
      - name: Auto-merge patch updates
        if: |
          steps.metadata.outputs.update-type == 'version-update:semver-patch' &&
          steps.wait-for-ci.outputs.conclusion == 'success' &&
          steps.wait-for-tests.outputs.conclusion == 'success'
        env:
          PR_URL: ${{github.event.pull_request.html_url}}
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        run: |
          echo "Auto-merging patch update PR: $PR_URL"
          gh pr merge --auto --squash "$PR_URL"
      
      - name: Auto-approve dev dependencies
        if: |
          steps.metadata.outputs.dependency-type == 'development' &&
          (steps.metadata.outputs.update-type == 'version-update:semver-patch' ||
           steps.metadata.outputs.update-type == 'version-update:semver-minor') &&
          steps.wait-for-ci.outputs.conclusion == 'success' &&
          steps.wait-for-tests.outputs.conclusion == 'success'
        env:
          PR_URL: ${{github.event.pull_request.html_url}}
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        run: |
          echo "Auto-approving dev dependency update: $PR_URL"
          gh pr review --approve "$PR_URL"
          gh pr merge --auto --squash "$PR_URL"
      
      - name: Comment on security updates
        if: |
          contains(steps.metadata.outputs.dependency-names, 'security') ||
          contains(github.event.pull_request.body, 'security')
        env:
          PR_URL: ${{github.event.pull_request.html_url}}
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        run: |
          gh pr comment "$PR_URL" --body "ðŸ”’ Security update detected. Please review carefully before merging."
      
      - name: Label based on update type
        env:
          PR_URL: ${{github.event.pull_request.html_url}}
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        run: |
          case "${{ steps.metadata.outputs.update-type }}" in
            "version-update:semver-major")
              gh pr edit "$PR_URL" --add-label "major-update" --add-label "needs-review"
              ;;
            "version-update:semver-minor")
              gh pr edit "$PR_URL" --add-label "minor-update"
              ;;
            "version-update:semver-patch")
              gh pr edit "$PR_URL" --add-label "patch-update" --add-label "auto-merge"
              ;;
          esac
      
      - name: Add security label for vulnerability fixes
        if: contains(github.event.pull_request.body, 'CVE-') || contains(github.event.pull_request.body, 'vulnerability')
        env:
          PR_URL: ${{github.event.pull_request.html_url}}
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        run: |
          gh pr edit "$PR_URL" --add-label "security" --add-label "urgent"
          gh pr comment "$PR_URL" --body "ðŸš¨ Vulnerability fix detected. High priority for review and merge."