name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  NODE_VERSION: '22'
  RUST_VERSION: stable

jobs:
  lint-and-format:
    name: Lint and Format
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
          components: rustfmt, clippy

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev \
            libwebkit2gtk-4.0-dev \
            libappindicator3-dev \
            librsvg2-dev \
            patchelf \
            libglib2.0-dev \
            pkg-config

      - name: Install frontend dependencies
        run: npm install

      - name: Lint TypeScript/React
        run: |
          npm run lint
          npm run typecheck

      - name: Check frontend formatting
        run: npm run format:check

      - name: Check Rust formatting
        working-directory: src-tauri
        run: cargo fmt -- --check

      - name: Lint Rust code
        working-directory: src-tauri
        run: cargo clippy -- -D warnings

      - name: Create issue on failure
        if: failure()
        uses: ./.github/actions/create-failure-issue
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          job-name: 'Lint and Format'
          workflow-name: 'CI Pipeline'
          error-message: 'Linting or formatting checks failed'
          labels: 'ci-failure,lint,automated'

  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Run unit tests
        run: npm test -- --coverage --watchAll=false

      - name: Run component tests
        run: npm run test:components

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: frontend

      - name: Create issue on failure
        if: failure()
        uses: ./.github/actions/create-failure-issue
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          job-name: 'Frontend Tests'
          workflow-name: 'CI Pipeline'
          error-message: 'Frontend tests failed'
          labels: 'ci-failure,testing,frontend,automated'

  test-backend:
    name: Backend Tests
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev \
            libwebkit2gtk-4.0-dev \
            libappindicator3-dev \
            librsvg2-dev \
            patchelf \
            libglib2.0-dev \
            pkg-config

      - name: Cache cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            src-tauri/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('src-tauri/Cargo.lock') }}

      - name: Run Rust tests
        working-directory: src-tauri
        run: cargo test --verbose

      - name: Run integration tests
        working-directory: src-tauri
        run: cargo test --test integration_tests

      - name: Create issue on failure
        if: failure()
        uses: ./.github/actions/create-failure-issue
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          job-name: 'Backend Tests'
          workflow-name: 'CI Pipeline'
          error-message: 'Backend tests failed'
          labels: 'ci-failure,testing,backend,rust,automated'

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Run npm audit
        run: npm audit --audit-level=moderate

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}

      - name: Run cargo audit
        working-directory: src-tauri
        run: |
          cargo install cargo-audit
          cargo audit

      - name: Create issue on failure
        if: failure()
        uses: ./.github/actions/create-failure-issue
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          job-name: 'Security Scanning'
          workflow-name: 'CI Pipeline'
          error-message: 'Security vulnerabilities detected'
          labels: 'ci-failure,security,automated'

  dependency-check:
    name: Dependency Validation
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Validate package-lock.json
        run: npm install --dry-run

      - name: Check for outdated packages
        run: |
          npm outdated --long || true
          echo "Outdated packages check completed"

      - name: License compliance check
        run: |
          npm install -g license-checker
          license-checker --summary

  build-validation:
    name: Build Validation
    runs-on: ubuntu-22.04
    needs: [lint-and-format, test-frontend, test-backend]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev \
            libwebkit2gtk-4.0-dev \
            libappindicator3-dev \
            librsvg2-dev \
            patchelf \
            libglib2.0-dev \
            pkg-config

      - name: Install dependencies
        run: npm install

      - name: Build frontend
        run: npm run build

      - name: Build Rust backend
        working-directory: src-tauri
        run: cargo build --release

      - name: Archive build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
            src-tauri/target/release/
          retention-days: 7

      - name: Create issue on failure
        if: failure()
        uses: ./.github/actions/create-failure-issue
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          job-name: 'Build Validation'
          workflow-name: 'CI Pipeline'
          error-message: 'Build validation failed'
          labels: 'ci-failure,build,automated'

  performance-check:
    name: Performance Analysis
    runs-on: ubuntu-22.04
    needs: [build-validation]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Build for performance testing
        run: npm run build

      - name: Bundle size analysis
        run: |
          npm install -g bundlesize
          bundlesize

      - name: Performance benchmarks
        run: |
          npm run perf:benchmark || true
          echo "Performance benchmarks completed"
