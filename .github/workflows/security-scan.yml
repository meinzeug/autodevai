name: Security Scanning

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

env:
  CARGO_TERM_COLOR: always

jobs:
  # Dependency vulnerability scanning
  dependency-scan:
    name: Dependency Vulnerabilities
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install dependencies
        run: npm ci

      - name: NPM Audit
        run: |
          npm audit --audit-level=moderate --json > npm-audit.json || true
          npm audit --audit-level=moderate

      - name: Rust Cargo Audit
        working-directory: src-tauri
        run: |
          cargo install --quiet cargo-audit
          cargo audit --json > ../rust-audit.json || true
          cargo audit

      - name: Upload audit results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-audit-results
          path: |
            npm-audit.json
            rust-audit.json
          retention-days: 30

  # Static code analysis with CodeQL
  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    strategy:
      matrix:
        language: ['javascript', 'typescript']
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          config-file: ./.github/codeql/codeql-config.yml

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{ matrix.language }}"

  # Container and filesystem scanning with Trivy
  trivy-scan:
    name: Trivy Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Trivy filesystem scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-fs-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Upload Trivy filesystem results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-fs-results.sarif'

      - name: Run Trivy config scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: '.'
          format: 'json'
          output: 'trivy-config-results.json'

      - name: Upload config scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trivy-config-results
          path: trivy-config-results.json
          retention-days: 30

  # Secret scanning
  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: GitLeaks scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

  # Custom security tests
  custom-security-tests:
    name: Custom Security Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run API security tests
        run: npm run test:security:api

      - name: Run container security tests
        run: npm run test:security:container

      - name: Run penetration tests
        run: npm run test:security:pentest

      - name: Run compliance tests
        run: npm run test:security:compliance

      - name: Generate security dashboard
        run: npm run security:monitor

      - name: Upload security test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: custom-security-results
          path: tests/security/reports/
          retention-days: 30

  # OWASP ZAP baseline scan
  zap-scan:
    name: OWASP ZAP Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies and build
        run: |
          npm ci
          npm run build

      - name: Start application
        run: |
          npm run preview &
          sleep 10

      - name: ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.12.0
        with:
          target: 'http://localhost:4173'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

      - name: Upload ZAP results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: zap-results
          path: report_html.html
          retention-days: 30

  # Security report aggregation
  security-report:
    name: Security Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, trivy-scan, secret-scan, custom-security-tests]
    if: always()
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download all security artifacts
        uses: actions/download-artifact@v4
        with:
          path: security-artifacts

      - name: Generate consolidated security report
        run: |
          mkdir -p security-reports
          
          echo "# Security Scan Report" > security-reports/consolidated-report.md
          echo "Generated on: $(date)" >> security-reports/consolidated-report.md
          echo "Commit: ${{ github.sha }}" >> security-reports/consolidated-report.md
          echo "" >> security-reports/consolidated-report.md
          
          echo "## Scan Results" >> security-reports/consolidated-report.md
          echo "- ✅ Dependency scan: ${{ needs.dependency-scan.result }}" >> security-reports/consolidated-report.md
          echo "- ✅ Trivy scan: ${{ needs.trivy-scan.result }}" >> security-reports/consolidated-report.md
          echo "- ✅ Secret scan: ${{ needs.secret-scan.result }}" >> security-reports/consolidated-report.md
          echo "- ✅ Custom security tests: ${{ needs.custom-security-tests.result }}" >> security-reports/consolidated-report.md
          echo "" >> security-reports/consolidated-report.md
          
          if [[ -d "security-artifacts" ]]; then
            echo "## Artifacts Generated" >> security-reports/consolidated-report.md
            find security-artifacts -type f -name "*.json" -o -name "*.sarif" | while read file; do
              echo "- $(basename "$file")" >> security-reports/consolidated-report.md
            done
          fi

      - name: Upload consolidated report
        uses: actions/upload-artifact@v4
        with:
          name: security-consolidated-report
          path: security-reports/
          retention-days: 90

      - name: Comment on PR with security summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v8
        with:
          script: |
            const results = {
              dependency: '${{ needs.dependency-scan.result }}',
              trivy: '${{ needs.trivy-scan.result }}',
              secrets: '${{ needs.secret-scan.result }}',
              custom: '${{ needs.custom-security-tests.result }}'
            };
            
            const passed = Object.values(results).filter(r => r === 'success').length;
            const total = Object.keys(results).length;
            
            const status = passed === total ? '✅ PASSED' : '⚠️ ISSUES FOUND';
            
            const comment = `## 🔒 Security Scan Results ${status}
            
            | Scan Type | Result |
            |-----------|--------|
            | Dependency Vulnerabilities | ${results.dependency === 'success' ? '✅' : '❌'} |
            | Trivy Filesystem | ${results.trivy === 'success' ? '✅' : '❌'} |
            | Secret Detection | ${results.secrets === 'success' ? '✅' : '❌'} |
            | Custom Security Tests | ${results.custom === 'success' ? '✅' : '❌'} |
            
            **Score: ${passed}/${total} checks passed**
            
            ${passed < total ? '⚠️ Please review the security findings and address any critical issues before merging.' : ''}
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });