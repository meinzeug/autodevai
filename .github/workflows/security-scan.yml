name: Security Scanning

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 2 * * 1' # Weekly Monday 2 AM UTC
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install dependencies
        run: npm install

      - name: Run npm audit
        run: |
          npm audit --audit-level=moderate --json > npm-audit.json
          npm audit --audit-level=moderate

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run cargo audit
        working-directory: src-tauri
        run: |
          cargo audit --json > cargo-audit.json
          cargo audit

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --json > snyk-report.json

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            npm-audit.json
            src-tauri/cargo-audit.json
            snyk-report.json
          retention-days: 30

  code-security-scan:
    name: Static Code Security Analysis
    runs-on: ubuntu-22.04
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript, rust
          queries: security-and-quality

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install dependencies
        run: npm install

      - name: Build frontend
        run: npm run build

      - name: Build Rust backend
        working-directory: src-tauri
        run: cargo build --release

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-22.04
    if: github.event_name != 'pull_request'
    steps:
      - uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -f docker/Dockerfile -t autodev-ai:security-scan .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'autodev-ai:security-scan'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Docker Scout
        uses: docker/scout-action@v1
        with:
          command: cves
          image: autodev-ai:security-scan
          sarif-file: docker-scout.sarif
          token: ${{ secrets.DOCKER_SCOUT_TOKEN }}

  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          config-path: .gitleaks.toml

  license-compliance:
    name: License Compliance Check
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Check npm licenses
        run: |
          npm install -g license-checker
          license-checker --summary --onlyAllow 'MIT;Apache-2.0;BSD;ISC;CC0-1.0;Unlicense'

      - name: Check Rust licenses
        working-directory: src-tauri
        run: |
          cargo install cargo-license
          cargo license --json > rust-licenses.json
          cargo license

      - name: Upload license reports
        uses: actions/upload-artifact@v4
        with:
          name: license-reports
          path: |
            src-tauri/rust-licenses.json
          retention-days: 30

  security-policy-check:
    name: Security Policy Validation
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Check for SECURITY.md
        run: |
          if [ ! -f SECURITY.md ]; then
            echo "::warning::SECURITY.md not found. Consider adding a security policy."
          fi

      - name: Validate Dependabot configuration
        run: |
          if [ ! -f .github/dependabot.yml ]; then
            echo "::warning::Dependabot configuration not found."
          fi

      - name: Check branch protection
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Check if main branch has protection rules
          curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/branches/main/protection" \
            | jq '.required_status_checks.strict' || echo "::warning::Branch protection may not be configured"

  penetration-test:
    name: Automated Penetration Testing
    runs-on: ubuntu-22.04
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Build application
        run: npm run build

      - name: Start application for testing
        run: |
          npm run preview &
          sleep 30

      - name: Run OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.7.0
        with:
          target: 'http://localhost:4173'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

  compliance-report:
    name: Generate Compliance Report
    runs-on: ubuntu-22.04
    needs:
      [dependency-scan, code-security-scan, secrets-scan, license-compliance]
    if: always()
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Generate compliance report
        run: |
          mkdir -p reports
          echo "# Security Compliance Report" > reports/compliance-report.md
          echo "Generated: $(date)" >> reports/compliance-report.md
          echo "" >> reports/compliance-report.md

          echo "## Dependency Scan Results" >> reports/compliance-report.md
          if [ -f security-reports/npm-audit.json ]; then
            echo "âœ… NPM Audit completed" >> reports/compliance-report.md
          fi

          if [ -f security-reports/cargo-audit.json ]; then
            echo "âœ… Cargo Audit completed" >> reports/compliance-report.md
          fi

          echo "" >> reports/compliance-report.md
          echo "## Code Security Analysis" >> reports/compliance-report.md
          echo "âœ… CodeQL analysis completed" >> reports/compliance-report.md

          echo "" >> reports/compliance-report.md
          echo "## Secrets Detection" >> reports/compliance-report.md
          echo "âœ… TruffleHog scan completed" >> reports/compliance-report.md
          echo "âœ… GitLeaks scan completed" >> reports/compliance-report.md

      - name: Upload compliance report
        uses: actions/upload-artifact@v4
        with:
          name: compliance-report
          path: reports/compliance-report.md
          retention-days: 90

      - name: Comment PR with security summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v8
        with:
          script: |
            const fs = require('fs');
            if (fs.existsSync('reports/compliance-report.md')) {
              const report = fs.readFileSync('reports/compliance-report.md', 'utf8');
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: '## ðŸ”’ Security Scan Summary\n\n' + report
              });
            }
