name: Main CI/CD Pipeline

permissions:
  contents: read
  issues: write
  actions: read
  security-events: write

on:
  push:
    branches: [main, develop]
    tags: ['v*']
  workflow_dispatch:

env:
  NODE_VERSION: '22'
  RUST_VERSION: 'stable'

jobs:
  # Quick validation first
  validate:
    name: Quick Validation
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      
      - name: Setup Node.js
        uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8 # v4.0.2
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm install
      
      - name: Type check
        run: npm run typecheck
      
      - name: Lint check
        run: npm run lint || true  # Non-blocking for now
      
      - name: Create issue on failure
        if: failure()
        uses: ./.github/actions/create-failure-issue
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          job-name: 'Quick Validation'
          workflow-name: 'Main CI/CD Pipeline'
          error-message: 'TypeScript or lint validation failed'
          labels: 'ci-failure,validation,automated'

  # Run tests
  test:
    name: Test Suite
    runs-on: ubuntu-22.04
    needs: validate
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      
      - name: Setup Node.js
        uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8 # v4.0.2
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm install
      
      - name: Run tests with coverage
        run: npm run test:coverage || npm test || true
      
      - name: Upload coverage
        if: success()
        uses: actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808 # v4.3.3
        with:
          name: coverage-report
          path: coverage/
          retention-days: 7
      
      - name: Create issue on failure
        if: failure()
        uses: ./.github/actions/create-failure-issue
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          job-name: 'Test Suite'
          workflow-name: 'Main CI/CD Pipeline'
          error-message: 'Tests failed - check test results'
          labels: 'ci-failure,tests,automated'

  # Build application
  build:
    name: Build Application
    runs-on: ubuntu-22.04
    needs: validate
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      
      - name: Setup Node.js
        uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8 # v4.0.2
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@21dc36fb71dd22e3317045c0c31a3f4249868b17 # stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev \
            libwebkit2gtk-4.0-dev \
            libappindicator3-dev \
            librsvg2-dev \
            patchelf \
            libglib2.0-dev \
            pkg-config
      
      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            src-tauri/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('src-tauri/Cargo.lock') }}
      
      - name: Install dependencies
        run: npm install
      
      - name: Build frontend
        run: npm run build
      
      - name: Build Tauri app
        working-directory: src-tauri
        run: cargo build --release
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808 # v4.3.3
        with:
          name: build-artifacts
          path: |
            dist/
            src-tauri/target/release/
          retention-days: 7
      
      - name: Create issue on failure
        if: failure()
        uses: ./.github/actions/create-failure-issue
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          job-name: 'Build Application'
          workflow-name: 'Main CI/CD Pipeline'
          error-message: 'Build failed - check build logs'
          labels: 'ci-failure,build,automated'

  # Security scan (quick)
  security:
    name: Security Check
    runs-on: ubuntu-22.04
    needs: validate
    continue-on-error: true  # Don't block pipeline for security warnings
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      
      - name: Setup Node.js
        uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8 # v4.0.2
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm install
      
      - name: NPM audit
        run: npm audit --audit-level=high || true
      
      - name: Create issue on failure
        if: failure()
        uses: ./.github/actions/create-failure-issue
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          job-name: 'Security Check'
          workflow-name: 'Main CI/CD Pipeline'
          error-message: 'Security vulnerabilities detected'
          labels: 'ci-failure,security,automated'

  # Final status check
  status:
    name: Pipeline Status
    runs-on: ubuntu-22.04
    needs: [validate, test, build, security]
    if: always()
    steps:
      - name: Check pipeline status
        env:
          VALIDATE_RESULT: ${{ needs.validate.result }}
          TEST_RESULT: ${{ needs.test.result }}
          BUILD_RESULT: ${{ needs.build.result }}
          SECURITY_RESULT: ${{ needs.security.result }}
        run: |
          # SECURITY: Use environment variables to prevent injection
          echo "✅ Main pipeline completed"
          printf 'Validation: %s\n' "${VALIDATE_RESULT}"
          printf 'Tests: %s\n' "${TEST_RESULT}"
          printf 'Build: %s\n' "${BUILD_RESULT}"
          printf 'Security: %s\n' "${SECURITY_RESULT}"
          
          if [[ "${VALIDATE_RESULT}" == "failure" ]] || \
             [[ "${TEST_RESULT}" == "failure" ]] || \
             [[ "${BUILD_RESULT}" == "failure" ]]; then
            echo "❌ Pipeline failed"
            exit 1
          else
            echo "✅ Pipeline successful"
          fi