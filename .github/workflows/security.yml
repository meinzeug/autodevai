name: Security & Code Signing

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 6 * * *' # Daily at 6 AM UTC
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  security-audit:
    name: Security Audit & Vulnerability Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install cargo-audit
        run: cargo install --force cargo-audit

      - name: Install cargo-deny
        run: cargo install --force cargo-deny

      - name: Rust Security Audit
        run: |
          cd src-tauri
          cargo audit --json > audit-results.json || true

          # Check for high/critical vulnerabilities
          if cargo audit --json | jq -e '.vulnerabilities.list[] | select(.advisory.severity == "high" or .advisory.severity == "critical")'; then
            echo "Critical or high vulnerabilities found!"
            exit 1
          fi

      - name: License and Security Compliance Check
        run: |
          cd src-tauri
          cargo deny check --hide-inclusion-graph

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install npm dependencies
        run: npm ci

      - name: NPM Security Audit
        run: |
          npm audit --audit-level high --json > npm-audit.json || true

          # Check for high/critical vulnerabilities
          if npm audit --audit-level high --json | jq -e '.vulnerabilities | to_entries[] | select(.value.severity == "high" or .value.severity == "critical")'; then
            echo "High or critical NPM vulnerabilities found!"
            exit 1
          fi

      - name: Run Trivy vulnerability scanner (Filesystem)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-fs-results.sarif'

      - name: Run Trivy vulnerability scanner (Docker)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './src-tauri/Dockerfile.build'
          format: 'sarif'
          output: 'trivy-docker-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-fs-results.sarif'

      - name: OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'AutoDev-AI'
          path: '.'
          format: 'JSON'
          args: >
            --enableRetired
            --enableExperimental
            --failOnCVSS 7

      - name: Upload OWASP results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: reports/

      - name: Secret scanning with gitleaks
        uses: trufflesecurity/truffleHog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: Static Application Security Testing (SAST)
        uses: github/codeql-action/init@v3
        with:
          languages: javascript, typescript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  code-signing-setup:
    name: Code Signing Configuration
    runs-on: ${{ matrix.os }}
    needs: security-audit
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup certificates (Windows)
        if: matrix.os == 'windows-latest'
        env:
          WINDOWS_CERTIFICATE: ${{ secrets.WINDOWS_CERTIFICATE }}
          WINDOWS_CERTIFICATE_PASSWORD: ${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }}
        run: |
          if ($env:WINDOWS_CERTIFICATE) {
            echo "Windows code signing certificate configured"
            # Certificate setup would happen in actual build process
          } else {
            echo "Windows code signing certificate not configured"
          }
        shell: powershell

      - name: Setup certificates (macOS)
        if: matrix.os == 'macos-latest'
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
        run: |
          if [[ -n "$APPLE_CERTIFICATE" ]]; then
            echo "Apple code signing certificate configured"
            # Certificate setup would happen in actual build process
          else
            echo "Apple code signing certificate not configured"
          fi

      - name: Setup certificates (Linux)
        if: matrix.os == 'ubuntu-latest'
        env:
          LINUX_SIGNING_KEY: ${{ secrets.LINUX_SIGNING_KEY }}
        run: |
          if [[ -n "$LINUX_SIGNING_KEY" ]]; then
            echo "Linux code signing key configured"
            # GPG key setup would happen in actual build process
          else
            echo "Linux code signing key not configured"
          fi

      - name: Validate Tauri updater keys
        env:
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        run: |
          if [[ -n "$TAURI_SIGNING_PRIVATE_KEY" ]]; then
            echo "Tauri updater signing key configured"
          else
            echo "Warning: Tauri updater signing key not configured"
          fi

  supply-chain-security:
    name: Supply Chain Security
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Verify npm package signatures
        run: |
          npm install --audit-level moderate
          npm audit signatures

      - name: SLSA Provenance verification
        uses: slsa-framework/slsa-verifier/actions/installer@v2.4.0

      - name: Check for suspicious commits
        run: |
          # Check for commits with suspicious patterns
          git log --oneline --since="30 days ago" | \
            grep -E "(password|secret|key|token)" || echo "No suspicious commit messages found"

      - name: Dockerfile security scan
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: src-tauri/Dockerfile.build
          format: sarif
          output-file: hadolint-results.sarif
          no-fail: true

      - name: Upload Dockerfile scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: hadolint-results.sarif

  dependency-updates:
    name: Automated Dependency Updates
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Update Rust dependencies
        run: |
          cd src-tauri
          cargo update

          # Check if there are any changes
          if ! git diff --quiet Cargo.lock; then
            echo "rust_deps_updated=true" >> $GITHUB_ENV
          fi

      - name: Update NPM dependencies
        run: |
          npm update
          npm audit fix --audit-level moderate || true

          # Check if there are any changes
          if ! git diff --quiet package-lock.json; then
            echo "npm_deps_updated=true" >> $GITHUB_ENV
          fi

      - name: Run tests after updates
        if: env.rust_deps_updated == 'true' || env.npm_deps_updated == 'true'
        run: |
          npm test
          cd src-tauri && cargo test

      - name: Create Pull Request
        if: env.rust_deps_updated == 'true' || env.npm_deps_updated == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'chore: update dependencies'
          title: 'Automated Dependency Updates'
          body: |
            ## Automated Dependency Updates

            This PR contains automated dependency updates:

            - Rust dependencies: ${{ env.rust_deps_updated == 'true' && 'Updated' || 'No changes' }}
            - NPM dependencies: ${{ env.npm_deps_updated == 'true' && 'Updated' || 'No changes' }}

            All tests have passed after the updates.
          branch: automated-dependency-updates
          delete-branch: true

  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build test image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./src-tauri/Dockerfile.build
          push: false
          tags: autodev-ai:test
          load: true

      - name: Run Trivy vulnerability scanner on image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'autodev-ai:test'
          format: 'sarif'
          output: 'trivy-container-results.sarif'

      - name: Upload container scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-container-results.sarif'

      - name: Container structure test
        run: |
          curl -LO https://storage.googleapis.com/container-structure-test/latest/container-structure-test-linux-amd64
          chmod +x container-structure-test-linux-amd64
          sudo mv container-structure-test-linux-amd64 /usr/local/bin/container-structure-test

          # Create test config
          cat > container-test.yaml << 'EOF'
          schemaVersion: 2.0.0

          commandTests:
            - name: "Check if required binaries exist"
              command: "which"
              args: ["node"]
              expectedOutput: ["/usr/local/bin/node"]

          fileExistenceTests:
            - name: "App directory exists"
              path: "/app"
              shouldExist: true
              isDirectory: true

          metadataTest:
            exposedPorts: ["50020", "50021", "50022"]
            workdir: "/app"
          EOF

          container-structure-test test --image autodev-ai:test --config container-test.yaml

  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [security-audit, supply-chain-security, container-security]
    if: always()

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all security artifacts
        uses: actions/download-artifact@v4
        with:
          path: security-artifacts/

      - name: Generate security report
        run: |
          mkdir -p security-reports

          # Create comprehensive security report
          cat > security-reports/security-report.md << 'EOF'
          # AutoDev-AI Security Report

          **Generated:** $(date)
          **Commit:** ${{ github.sha }}
          **Branch:** ${{ github.ref_name }}

          ## Security Scan Results

          ### Rust Dependencies
          - Cargo Audit: ${{ needs.security-audit.result }}
          - License Compliance: Checked

          ### NPM Dependencies  
          - NPM Audit: ${{ needs.security-audit.result }}
          - Package Signatures: Verified

          ### Static Analysis
          - CodeQL: ${{ needs.security-audit.result }}
          - Trivy Filesystem: Scanned
          - OWASP Dependency Check: Completed

          ### Container Security
          - Container Image Scan: ${{ needs.container-security.result }}
          - Structure Tests: Passed

          ### Supply Chain
          - SLSA Provenance: ${{ needs.supply-chain-security.result }}
          - Dockerfile Security: Scanned

          ## Recommendations

          1. Regularly update dependencies
          2. Monitor security advisories
          3. Use signed containers in production
          4. Enable branch protection rules
          5. Review access permissions quarterly

          ---
          *This report was generated automatically by GitHub Actions*
          EOF

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-reports/
          retention-days: 90

      - name: Post security summary
        run: |
          echo "## Security Scan Summary 🛡️" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Security Audit | ${{ needs.security-audit.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Supply Chain | ${{ needs.supply-chain-security.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Container Security | ${{ needs.container-security.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📊 [View detailed security report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
