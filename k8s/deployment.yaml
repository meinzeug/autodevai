apiVersion: apps/v1
kind: Deployment
metadata:
  name: autodev-ai-deployment
  namespace: autodev-ai
  labels:
    app: autodev-ai
    version: v1.0.0
    component: neural-bridge
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: autodev-ai
  template:
    metadata:
      labels:
        app: autodev-ai
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: autodev-ai-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 2000
      containers:
      - name: neural-bridge
        image: ghcr.io/autodev-ai/neural-bridge:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 50020
          name: gui-port
          protocol: TCP
        - containerPort: 50021
          name: api-port
          protocol: TCP
        - containerPort: 50022
          name: sandbox-port
          protocol: TCP
        - containerPort: 8080
          name: metrics
          protocol: TCP
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT_GUI
          value: "50020"
        - name: PORT_API
          value: "50021"
        - name: PORT_SANDBOX
          value: "50022"
        - name: METRICS_PORT
          value: "8080"
        - name: LOG_LEVEL
          value: "info"
        - name: RUST_LOG
          value: "neural_bridge=info,tauri=info"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: autodev-ai-secrets
              key: database-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: autodev-ai-secrets
              key: redis-url
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: autodev-ai-secrets
              key: openai-api-key
        - name: ANTHROPIC_API_KEY
          valueFrom:
            secretKeyRef:
              name: autodev-ai-secrets
              key: anthropic-api-key
        resources:
          requests:
            cpu: "500m"
            memory: "1Gi"
          limits:
            cpu: "2"
            memory: "4Gi"
        livenessProbe:
          httpGet:
            path: /health
            port: api-port
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: api-port
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /startup
            port: api-port
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 30
        volumeMounts:
        - name: config-volume
          mountPath: /app/config
          readOnly: true
        - name: logs-volume
          mountPath: /app/logs
        - name: cache-volume
          mountPath: /app/cache
      volumes:
      - name: config-volume
        configMap:
          name: autodev-ai-config
      - name: logs-volume
        emptyDir:
          sizeLimit: 1Gi
      - name: cache-volume
        emptyDir:
          sizeLimit: 2Gi
      nodeSelector:
        kubernetes.io/arch: amd64
      tolerations:
      - key: node-role.kubernetes.io/compute
        operator: Equal
        value: "true"
        effect: NoSchedule
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - autodev-ai
              topologyKey: kubernetes.io/hostname
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: autodev-ai-sa
  namespace: autodev-ai
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::ACCOUNT_ID:role/autodev-ai-role
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: autodev-ai
  name: autodev-ai-role
rules:
- apiGroups: [""]
  resources: ["pods", "services", "configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: autodev-ai-rolebinding
  namespace: autodev-ai
subjects:
- kind: ServiceAccount
  name: autodev-ai-sa
  namespace: autodev-ai
roleRef:
  kind: Role
  name: autodev-ai-role
  apiGroup: rbac.authorization.k8s.io