apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: autodevai
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: database
spec:
  serviceName: postgres-service
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: postgres
  template:
    metadata:
      labels:
        app.kubernetes.io/name: postgres
        app.kubernetes.io/component: database
    spec:
      securityContext:
        fsGroup: 999
        runAsUser: 999
      containers:
      - name: postgres
        image: postgres:15-alpine
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 999
          runAsGroup: 999
          capabilities:
            drop: ["ALL"]
          readOnlyRootFilesystem: false  # PostgreSQL needs write access to /var/lib/postgresql/data
        ports:
        - containerPort: 5432
          name: postgres
        env:
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: postgres-config
              key: POSTGRES_DB
        - name: POSTGRES_USER
          valueFrom:
            configMapKeyRef:
              name: postgres-config
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: autodevai-secrets
              key: POSTGRES_PASSWORD
        - name: PGDATA
          valueFrom:
            configMapKeyRef:
              name: postgres-config
              key: PGDATA
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        - name: postgres-config-volume
          mountPath: /etc/postgresql/postgresql.conf
          subPath: postgresql.conf
        - name: postgres-init
          mountPath: /docker-entrypoint-initdb.d
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
            ephemeral-storage: "1Gi"
          limits:
            memory: "1Gi"
            cpu: "500m"
            ephemeral-storage: "2Gi"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - autodevai
            - -d
            - autodevai
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - autodevai
            - -d
            - autodevai
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: postgres-config-volume
        configMap:
          name: postgres-config
      - name: postgres-init
        configMap:
          name: postgres-init
  volumeClaimTemplates:
  - metadata:
      name: postgres-storage
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: fast-ssd
      resources:
        requests:
          storage: 20Gi

---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: autodevai
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: database
spec:
  ports:
  - port: 5432
    targetPort: 5432
    name: postgres
  selector:
    app.kubernetes.io/name: postgres
  type: ClusterIP

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init
  namespace: autodevai
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: database-init
data:
  init.sql: |
    -- AutoDev-AI Kubernetes Database Initialization
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    CREATE EXTENSION IF NOT EXISTS "pg_stat_statements";
    CREATE EXTENSION IF NOT EXISTS "pgcrypto";
    
    -- Create schemas
    CREATE SCHEMA IF NOT EXISTS auth;
    CREATE SCHEMA IF NOT EXISTS projects;
    CREATE SCHEMA IF NOT EXISTS sandboxes;
    CREATE SCHEMA IF NOT EXISTS monitoring;
    
    -- Users table
    CREATE TABLE IF NOT EXISTS auth.users (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        email VARCHAR(255) UNIQUE NOT NULL,
        password_hash VARCHAR(255) NOT NULL,
        full_name VARCHAR(255),
        role VARCHAR(50) DEFAULT 'user',
        is_active BOOLEAN DEFAULT true,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        last_login TIMESTAMP WITH TIME ZONE
    );
    
    -- Projects table
    CREATE TABLE IF NOT EXISTS projects.projects (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        name VARCHAR(255) NOT NULL,
        description TEXT,
        user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
        repository_url VARCHAR(500),
        branch VARCHAR(100) DEFAULT 'main',
        status VARCHAR(50) DEFAULT 'active',
        settings JSONB DEFAULT '{}',
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
    );
    
    -- Sandboxes table
    CREATE TABLE IF NOT EXISTS sandboxes.sandboxes (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        project_id UUID REFERENCES projects.projects(id) ON DELETE CASCADE,
        name VARCHAR(255) NOT NULL,
        type VARCHAR(100) NOT NULL,
        port INTEGER,
        status VARCHAR(50) DEFAULT 'stopped',
        container_id VARCHAR(255),
        environment JSONB DEFAULT '{}',
        resources JSONB DEFAULT '{"cpu": "1", "memory": "512m"}',
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        last_accessed TIMESTAMP WITH TIME ZONE DEFAULT NOW()
    );
    
    -- Create indexes
    CREATE INDEX IF NOT EXISTS idx_users_email ON auth.users(email);
    CREATE INDEX IF NOT EXISTS idx_projects_user_id ON projects.projects(user_id);
    CREATE INDEX IF NOT EXISTS idx_sandboxes_project_id ON sandboxes.sandboxes(project_id);
    
    -- Insert default admin user
    INSERT INTO auth.users (email, password_hash, full_name, role) VALUES 
    ('admin@autodev.ai', crypt('admin123!', gen_salt('bf')), 'Kubernetes Admin', 'admin')
    ON CONFLICT (email) DO NOTHING;