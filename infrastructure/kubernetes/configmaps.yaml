apiVersion: v1
kind: ConfigMap
metadata:
  name: autodevai-config
  namespace: autodevai
  labels:
    app.kubernetes.io/name: autodevai
    app.kubernetes.io/component: config
data:
  NODE_ENV: "production"
  DATABASE_HOST: "postgres-service"
  DATABASE_NAME: "autodevai"
  DATABASE_PORT: "5432"
  REDIS_HOST: "redis-service"
  REDIS_PORT: "6379"
  SANDBOX_PORT_RANGE_START: "50010"
  SANDBOX_PORT_RANGE_END: "50089"
  MAX_CONCURRENT_SANDBOXES: "80"
  JWT_SECRET: "autodevai_jwt_production_2024"
  GRAFANA_PORT: "3000"
  PROMETHEUS_PORT: "9090"
  
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  namespace: autodevai
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: database
data:
  POSTGRES_DB: autodevai
  POSTGRES_USER: autodevai
  PGDATA: /var/lib/postgresql/data/pgdata
  postgresql.conf: |
    # PostgreSQL configuration for Kubernetes
    listen_addresses = '*'
    port = 5432
    max_connections = 200
    shared_buffers = 256MB
    effective_cache_size = 1GB
    maintenance_work_mem = 64MB
    checkpoint_completion_target = 0.9
    wal_buffers = 16MB
    default_statistics_target = 100
    random_page_cost = 1.1
    effective_io_concurrency = 200
    work_mem = 4MB
    min_wal_size = 1GB
    max_wal_size = 4GB
    max_worker_processes = 8
    max_parallel_workers_per_gather = 2
    max_parallel_workers = 8
    max_parallel_maintenance_workers = 2
    
    # Logging
    log_destination = 'stderr'
    logging_collector = on
    log_checkpoints = on
    log_connections = on
    log_disconnections = on
    log_lock_waits = on
    log_statement = 'ddl'
    log_temp_files = 10MB
    log_line_prefix = '%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h '

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-config
  namespace: autodevai
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: cache
data:
  redis.conf: |
    # Redis configuration for Kubernetes
    bind 0.0.0.0
    protected-mode yes
    port 6379
    tcp-backlog 511
    timeout 0
    tcp-keepalive 300
    
    # Memory management
    maxmemory 512mb
    maxmemory-policy allkeys-lru
    maxmemory-samples 5
    
    # Persistence
    save 900 1
    save 300 10
    save 60 10000
    appendonly yes
    appendfsync everysec
    
    # Performance
    hz 10
    activerehashing yes
    
    # Security
    requirepass autodevai_redis_k8s_2024

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: autodevai
  labels:
    app.kubernetes.io/name: nginx
    app.kubernetes.io/component: proxy
data:
  nginx.conf: |
    user nginx;
    worker_processes auto;
    error_log /var/log/nginx/error.log notice;
    pid /var/run/nginx.pid;
    
    events {
        worker_connections 1024;
        use epoll;
        multi_accept on;
    }
    
    http {
        include /etc/nginx/mime.types;
        default_type application/octet-stream;
        
        log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for"';
        
        access_log /var/log/nginx/access.log main;
        
        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        keepalive_timeout 65;
        types_hash_max_size 2048;
        client_max_body_size 100M;
        
        gzip on;
        gzip_vary on;
        gzip_min_length 10240;
        gzip_proxied expired no-cache no-store private must-revalidate max-age=0;
        gzip_types text/plain text/css text/xml text/javascript application/javascript application/json application/xml image/svg+xml;
        
        upstream autodevai_gui {
            server autodevai-gui-service:3000;
        }
        
        upstream sandbox_manager {
            server sandbox-manager-service:8080;
        }
        
        server {
            listen 80;
            server_name _;
            
            location / {
                proxy_pass http://autodevai_gui;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }
            
            location /api/sandbox/ {
                proxy_pass http://sandbox_manager/;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }
            
            location /health {
                access_log off;
                return 200 "healthy\n";
                add_header Content-Type text/plain;
            }
        }
    }