#!/bin/bash\n# Development script for AutoDev-AI Neural Bridge Platform\n# Provides development server with hot reload and debugging tools\n\nset -e\n\n# Colors for output\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nNC='\\033[0m' # No Color\n\n# Configuration\nMODE=${1:-\"dev\"}\nAUTO_RELOAD=${2:-\"true\"}\nDEBUG_LEVEL=${3:-\"info\"}\nPORT=${4:-\"1420\"}\n\necho -e \"${BLUE}🚀 AutoDev-AI Neural Bridge Platform Development Server${NC}\"\necho -e \"${BLUE}Mode: ${MODE}${NC}\"\necho -e \"${BLUE}Auto Reload: ${AUTO_RELOAD}${NC}\"\necho -e \"${BLUE}Debug Level: ${DEBUG_LEVEL}${NC}\"\necho -e \"${BLUE}Port: ${PORT}${NC}\"\necho \"\"\n\n# Pre-development checks\necho -e \"${YELLOW}📋 Running pre-development checks...${NC}\"\n\n# Check required tools\ncheck_tool() {\n    if command -v $1 &> /dev/null; then\n        echo -e \"${GREEN}✅ $1 found${NC}\"\n    else\n        echo -e \"${RED}❌ $1 not found${NC}\"\n        return 1\n    fi\n}\n\ncheck_tool \"cargo\" || exit 1\ncheck_tool \"node\" || exit 1\ncheck_tool \"npm\" || exit 1\n\n# Check optional tools\ncheck_tool \"docker\" || echo -e \"${YELLOW}⚠️  Docker not found (optional for container development)${NC}\"\ncheck_tool \"git\" || echo -e \"${YELLOW}⚠️  Git not found (optional for version control)${NC}\"\n\n# Install Tauri CLI if not present\nif ! command -v cargo-tauri &> /dev/null; then\n    echo -e \"${YELLOW}📦 Installing Tauri CLI...${NC}\"\n    cargo install tauri-cli --locked\nfi\n\n# Setup environment variables\necho -e \"${YELLOW}🔧 Setting up development environment...${NC}\"\n\nexport RUST_LOG=\"$DEBUG_LEVEL\"\nexport RUST_BACKTRACE=\"1\"\nexport TAURI_DEV_HOST=\"127.0.0.1\"\nexport TAURI_DEV_PORT=\"$PORT\"\n\n# Development mode specific settings\ncase $MODE in\n    \"dev\")\n        export RUST_LOG=\"debug\"\n        export CARGO_INCREMENTAL=\"1\"\n        ;;\n    \"debug\")\n        export RUST_LOG=\"trace\"\n        export RUST_BACKTRACE=\"full\"\n        export CARGO_INCREMENTAL=\"1\"\n        ;;\n    \"fast\")\n        export RUST_LOG=\"warn\"\n        export CARGO_INCREMENTAL=\"1\"\n        CARGO_FLAGS=\"--release\"\n        ;;\n    *)\n        echo -e \"${RED}❌ Unknown mode: $MODE${NC}\"\n        echo -e \"${YELLOW}Available modes: dev, debug, fast${NC}\"\n        exit 1\n        ;;\nesac\n\n# Function to start frontend development server\nstart_frontend() {\n    echo -e \"${YELLOW}🌐 Starting frontend development server...${NC}\"\n    \n    cd ..\n    \n    # Install dependencies if needed\n    if [ ! -d \"node_modules\" ]; then\n        echo -e \"${YELLOW}📦 Installing frontend dependencies...${NC}\"\n        npm install\n    fi\n    \n    # Start Vite development server\n    npm run dev &\n    FRONTEND_PID=$!\n    \n    echo -e \"${GREEN}✅ Frontend server started (PID: $FRONTEND_PID)${NC}\"\n    \n    cd src-tauri\n}\n\n# Function to start backend development server\nstart_backend() {\n    echo -e \"${YELLOW}🦀 Starting Rust backend development server...${NC}\"\n    \n    # Run cargo check first for quick feedback\n    echo -e \"${YELLOW}🔍 Running cargo check...${NC}\"\n    cargo check\n    \n    if [ $? -ne 0 ]; then\n        echo -e \"${RED}❌ Cargo check failed${NC}\"\n        return 1\n    fi\n    \n    # Start Tauri development server\n    if [ \"$AUTO_RELOAD\" = \"true\" ]; then\n        echo -e \"${YELLOW}🔄 Starting with auto-reload...${NC}\"\n        cargo tauri dev $CARGO_FLAGS\n    else\n        echo -e \"${YELLOW}🚀 Starting without auto-reload...${NC}\"\n        cargo run $CARGO_FLAGS\n    fi\n}\n\n# Function to setup development database/services\nsetup_dev_services() {\n    echo -e \"${YELLOW}🗄️  Setting up development services...${NC}\"\n    \n    # Check if Docker Compose file exists\n    if [ -f \"../docker/docker-compose.dev.yml\" ]; then\n        echo -e \"${YELLOW}🐳 Starting Docker development services...${NC}\"\n        cd ../docker\n        docker-compose -f docker-compose.dev.yml up -d\n        cd ../src-tauri\n        echo -e \"${GREEN}✅ Docker services started${NC}\"\n    else\n        echo -e \"${YELLOW}⚠️  No Docker Compose file found, skipping container setup${NC}\"\n    fi\n    \n    # Setup local development database\n    if [ ! -f \"./dev.db\" ]; then\n        echo -e \"${YELLOW}🗄️  Creating development database...${NC}\"\n        # Initialize development database here\n        touch ./dev.db\n        echo -e \"${GREEN}✅ Development database created${NC}\"\n    fi\n}\n\n# Function to run development tests in watch mode\nstart_test_watcher() {\n    echo -e \"${YELLOW}🧪 Starting test watcher...${NC}\"\n    \n    if command -v cargo-watch &> /dev/null; then\n        cargo watch -x \"test --lib\" &\n        TEST_WATCHER_PID=$!\n        echo -e \"${GREEN}✅ Test watcher started (PID: $TEST_WATCHER_PID)${NC}\"\n    else\n        echo -e \"${YELLOW}⚠️  cargo-watch not found, install with: cargo install cargo-watch${NC}\"\n    fi\n}\n\n# Function to cleanup on exit\ncleanup() {\n    echo -e \"\\n${YELLOW}🧹 Cleaning up development environment...${NC}\"\n    \n    if [ ! -z \"$FRONTEND_PID\" ]; then\n        kill $FRONTEND_PID 2>/dev/null || true\n        echo -e \"${GREEN}✅ Frontend server stopped${NC}\"\n    fi\n    \n    if [ ! -z \"$TEST_WATCHER_PID\" ]; then\n        kill $TEST_WATCHER_PID 2>/dev/null || true\n        echo -e \"${GREEN}✅ Test watcher stopped${NC}\"\n    fi\n    \n    # Stop Docker services if they were started\n    if [ -f \"../docker/docker-compose.dev.yml\" ]; then\n        cd ../docker\n        docker-compose -f docker-compose.dev.yml down 2>/dev/null || true\n        cd ../src-tauri\n        echo -e \"${GREEN}✅ Docker services stopped${NC}\"\n    fi\n    \n    echo -e \"${GREEN}🎉 Development environment cleaned up${NC}\"\n}\n\n# Register cleanup function\ntrap cleanup EXIT INT TERM\n\n# Function to show development tips\nshow_dev_tips() {\n    echo -e \"${BLUE}💡 Development Tips:${NC}\"\n    echo -e \"${BLUE}• Frontend URL: http://localhost:$PORT${NC}\"\n    echo -e \"${BLUE}• Logs: tail -f ~/.autodev-ai/logs/autodev-ai.log${NC}\"\n    echo -e \"${BLUE}• Tests: cargo test (in another terminal)${NC}\"\n    echo -e \"${BLUE}• Linting: cargo clippy${NC}\"\n    echo -e \"${BLUE}• Formatting: cargo fmt${NC}\"\n    echo -e \"${BLUE}• Database: ./dev.db (SQLite)${NC}\"\n    echo -e \"${BLUE}• Docker: docker-compose -f ../docker/docker-compose.dev.yml logs${NC}\"\n    echo \"\"\n    echo -e \"${BLUE}🔧 Useful Commands:${NC}\"\n    echo -e \"${BLUE}• Restart: Ctrl+C and run script again${NC}\"\n    echo -e \"${BLUE}• Clean build: cargo clean && cargo build${NC}\"\n    echo -e \"${BLUE}• Reset DB: rm ./dev.db && restart${NC}\"\n    echo -e \"${BLUE}• View logs: cargo tauri dev --verbose${NC}\"\n    echo \"\"\n}\n\n# Function to monitor system resources\nmonitor_resources() {\n    if command -v htop &> /dev/null; then\n        echo -e \"${BLUE}📊 System monitoring available: htop${NC}\"\n    fi\n    \n    if command -v iotop &> /dev/null; then\n        echo -e \"${BLUE}💾 I/O monitoring available: iotop${NC}\"\n    fi\n}\n\n# Main development workflow\necho -e \"${YELLOW}🚀 Starting development workflow...${NC}\"\n\n# Setup development services\nsetup_dev_services\n\n# Start test watcher if available\nstart_test_watcher\n\n# Show development information\nshow_dev_tips\nmonitor_resources\n\n# Check if we should start frontend separately\nif [ \"$AUTO_RELOAD\" = \"true\" ]; then\n    echo -e \"${YELLOW}🔄 Auto-reload mode: starting frontend and backend together${NC}\"\n    start_backend\nelse\n    echo -e \"${YELLOW}🚀 Manual mode: starting frontend and backend separately${NC}\"\n    start_frontend\n    \n    # Give frontend time to start\n    sleep 3\n    \n    start_backend\nfi\n\n# Keep script running until interrupted\necho -e \"${GREEN}✅ Development environment is running${NC}\"\necho -e \"${YELLOW}Press Ctrl+C to stop all services${NC}\"\n\n# Wait for user interrupt\nwhile true; do\n    sleep 1\ndone"