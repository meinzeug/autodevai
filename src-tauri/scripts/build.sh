#!/bin/bash\n# Build script for AutoDev-AI Neural Bridge Platform\n# Comprehensive build system with optimization and packaging\n\nset -e\n\n# Colors for output\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nNC='\\033[0m' # No Color\n\n# Configuration\nBUILD_MODE=${1:-\"release\"}\nTARGET_OS=${2:-\"current\"}\nPACKAGE=${3:-\"true\"}\nVERSION=$(grep '^version' Cargo.toml | sed 's/version = \"\\(.*\\)\"/\\1/')\n\necho -e \"${BLUE}🚀 AutoDev-AI Neural Bridge Platform Build System${NC}\"\necho -e \"${BLUE}Version: ${VERSION}${NC}\"\necho -e \"${BLUE}Build Mode: ${BUILD_MODE}${NC}\"\necho -e \"${BLUE}Target OS: ${TARGET_OS}${NC}\"\necho \"\"\n\n# Pre-build checks\necho -e \"${YELLOW}📋 Running pre-build checks...${NC}\"\n\n# Check Rust toolchain\nif ! command -v rustc &> /dev/null; then\n    echo -e \"${RED}❌ Rust is not installed${NC}\"\n    exit 1\nfi\n\n# Check Tauri CLI\nif ! command -v cargo-tauri &> /dev/null; then\n    echo -e \"${YELLOW}⚠️  Tauri CLI not found, installing...${NC}\"\n    cargo install tauri-cli\nfi\n\n# Check Node.js for frontend\nif ! command -v node &> /dev/null; then\n    echo -e \"${RED}❌ Node.js is not installed${NC}\"\n    exit 1\nfi\n\n# Check system dependencies\necho -e \"${YELLOW}🔍 Checking system dependencies...${NC}\"\n\nif command -v docker &> /dev/null; then\n    echo -e \"${GREEN}✅ Docker found${NC}\"\nelse\n    echo -e \"${YELLOW}⚠️  Docker not found (optional)${NC}\"\nfi\n\nif command -v git &> /dev/null; then\n    echo -e \"${GREEN}✅ Git found${NC}\"\nelse\n    echo -e \"${YELLOW}⚠️  Git not found (optional)${NC}\"\nfi\n\n# Build frontend first\necho -e \"${YELLOW}🔨 Building frontend...${NC}\"\ncd ..\nnpm install\nnpm run build\ncd src-tauri\n\n# Rust optimization based on build mode\nif [ \"$BUILD_MODE\" = \"release\" ]; then\n    echo -e \"${YELLOW}🔧 Configuring release optimizations...${NC}\"\n    export RUSTFLAGS=\"-C target-cpu=native -C link-arg=-s\"\n    CARGO_PROFILE=\"--release\"\nelse\n    echo -e \"${YELLOW}🔧 Configuring development build...${NC}\"\n    CARGO_PROFILE=\"\"\nfi\n\n# Cross-compilation setup\nsetup_cross_compilation() {\n    case $TARGET_OS in\n        \"windows\")\n            echo -e \"${YELLOW}🏗️  Setting up Windows cross-compilation...${NC}\"\n            rustup target add x86_64-pc-windows-gnu\n            TARGET_FLAG=\"--target x86_64-pc-windows-gnu\"\n            ;;\n        \"macos\")\n            echo -e \"${YELLOW}🏗️  Setting up macOS cross-compilation...${NC}\"\n            rustup target add x86_64-apple-darwin\n            rustup target add aarch64-apple-darwin\n            TARGET_FLAG=\"--target x86_64-apple-darwin\"\n            ;;\n        \"linux\")\n            echo -e \"${YELLOW}🏗️  Setting up Linux cross-compilation...${NC}\"\n            rustup target add x86_64-unknown-linux-gnu\n            TARGET_FLAG=\"--target x86_64-unknown-linux-gnu\"\n            ;;\n        \"current\")\n            echo -e \"${YELLOW}🏗️  Building for current platform...${NC}\"\n            TARGET_FLAG=\"\"\n            ;;\n        *)\n            echo -e \"${RED}❌ Unsupported target OS: $TARGET_OS${NC}\"\n            exit 1\n            ;;\n    esac\n}\n\nif [ \"$TARGET_OS\" != \"current\" ]; then\n    setup_cross_compilation\nfi\n\n# Run tests first\necho -e \"${YELLOW}🧪 Running tests...${NC}\"\ncargo test $CARGO_PROFILE $TARGET_FLAG\n\nif [ $? -ne 0 ]; then\n    echo -e \"${RED}❌ Tests failed${NC}\"\n    exit 1\nfi\n\necho -e \"${GREEN}✅ All tests passed${NC}\"\n\n# Linting and code quality\necho -e \"${YELLOW}🔍 Running code quality checks...${NC}\"\n\nif command -v cargo-clippy &> /dev/null; then\n    cargo clippy $CARGO_PROFILE $TARGET_FLAG -- -D warnings\nelse\n    echo -e \"${YELLOW}⚠️  Clippy not found, skipping linting${NC}\"\nfi\n\nif command -v cargo-fmt &> /dev/null; then\n    cargo fmt -- --check\nelse\n    echo -e \"${YELLOW}⚠️  rustfmt not found, skipping format check${NC}\"\nfi\n\n# Security audit\nif command -v cargo-audit &> /dev/null; then\n    echo -e \"${YELLOW}🔒 Running security audit...${NC}\"\n    cargo audit\nelse\n    echo -e \"${YELLOW}⚠️  cargo-audit not found, skipping security audit${NC}\"\nfi\n\n# Build the application\necho -e \"${YELLOW}🔨 Building AutoDev-AI Neural Bridge Platform...${NC}\"\n\nif [ \"$PACKAGE\" = \"true\" ]; then\n    echo -e \"${YELLOW}📦 Building with packaging...${NC}\"\n    cargo tauri build $CARGO_PROFILE $TARGET_FLAG\nelse\n    echo -e \"${YELLOW}🔨 Building binary only...${NC}\"\n    cargo build $CARGO_PROFILE $TARGET_FLAG\nfi\n\nif [ $? -ne 0 ]; then\n    echo -e \"${RED}❌ Build failed${NC}\"\n    exit 1\nfi\n\n# Post-build optimizations\nif [ \"$BUILD_MODE\" = \"release\" ]; then\n    echo -e \"${YELLOW}⚡ Running post-build optimizations...${NC}\"\n    \n    # Strip debug symbols if not already done\n    if [ \"$TARGET_OS\" = \"current\" ] && command -v strip &> /dev/null; then\n        BINARY_PATH=\"target/release/neural-bridge-platform\"\n        if [ -f \"$BINARY_PATH\" ]; then\n            strip \"$BINARY_PATH\"\n            echo -e \"${GREEN}✅ Debug symbols stripped${NC}\"\n        fi\n    fi\n    \n    # Compress binary if upx is available\n    if command -v upx &> /dev/null; then\n        BINARY_PATH=\"target/release/neural-bridge-platform\"\n        if [ -f \"$BINARY_PATH\" ]; then\n            upx --best \"$BINARY_PATH\" 2>/dev/null || echo -e \"${YELLOW}⚠️  UPX compression failed${NC}\"\n        fi\n    fi\nfi\n\n# Generate build artifacts\necho -e \"${YELLOW}📋 Generating build artifacts...${NC}\"\n\nBUILD_DIR=\"../build-artifacts/$(date +%Y%m%d_%H%M%S)\"\nmkdir -p \"$BUILD_DIR\"\n\n# Copy binary\nif [ \"$BUILD_MODE\" = \"release\" ]; then\n    cp target/release/neural-bridge-platform \"$BUILD_DIR/\" 2>/dev/null || true\nelse\n    cp target/debug/neural-bridge-platform \"$BUILD_DIR/\" 2>/dev/null || true\nfi\n\n# Copy bundle artifacts\ncp -r target/release/bundle/* \"$BUILD_DIR/\" 2>/dev/null || true\n\n# Generate checksums\necho -e \"${YELLOW}🔐 Generating checksums...${NC}\"\ncd \"$BUILD_DIR\"\nfind . -type f -exec sha256sum {} \\; > checksums.sha256\ncd - > /dev/null\n\n# Build report\necho -e \"${GREEN}✅ Build completed successfully!${NC}\"\necho \"\"\necho -e \"${BLUE}📊 Build Summary:${NC}\"\necho -e \"${BLUE}Version: ${VERSION}${NC}\"\necho -e \"${BLUE}Mode: ${BUILD_MODE}${NC}\"\necho -e \"${BLUE}Target: ${TARGET_OS}${NC}\"\necho -e \"${BLUE}Artifacts: ${BUILD_DIR}${NC}\"\n\n# Binary size information\nif [ -f \"target/release/neural-bridge-platform\" ]; then\n    BINARY_SIZE=$(du -h target/release/neural-bridge-platform | cut -f1)\n    echo -e \"${BLUE}Binary Size: ${BINARY_SIZE}${NC}\"\nfi\n\n# Bundle size information\nif [ -d \"target/release/bundle\" ]; then\n    BUNDLE_SIZE=$(du -sh target/release/bundle | cut -f1)\n    echo -e \"${BLUE}Bundle Size: ${BUNDLE_SIZE}${NC}\"\nfi\n\necho \"\"\necho -e \"${GREEN}🎉 AutoDev-AI Neural Bridge Platform build complete!${NC}\"\n\n# Optional: Run quick smoke test\nif [ \"$BUILD_MODE\" = \"release\" ] && [ -f \"target/release/neural-bridge-platform\" ]; then\n    echo -e \"${YELLOW}🧪 Running smoke test...${NC}\"\n    timeout 10s ./target/release/neural-bridge-platform --version > /dev/null 2>&1 || true\n    echo -e \"${GREEN}✅ Smoke test completed${NC}\"\nfi"