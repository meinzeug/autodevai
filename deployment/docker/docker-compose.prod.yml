version: '3.8'

services:
  # AutoDev-AI Neural Bridge Platform - Main Application
  autodev-ai:
    build:
      context: ../../
      dockerfile: deployment/docker/Dockerfile
    image: autodev-ai:latest
    container_name: autodev-ai-app
    restart: unless-stopped
    ports:
      - "50000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://autodev:${DB_PASSWORD}@postgres:5432/autodev_ai
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - CLAUDE_API_KEY=${CLAUDE_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - PORT=3000
      - LOG_LEVEL=info
      - NEURAL_BRIDGE_ENABLED=true
      - SANDBOX_PORT_RANGE=50010-50090
      - DOCKER_HOST=unix:///var/run/docker.sock
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - autodev-uploads:/app/uploads
      - autodev-logs:/app/logs
      - autodev-temp:/app/temp
    depends_on:
      - postgres
      - redis
    networks:
      - autodev-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: autodev-ai-db
    restart: unless-stopped
    ports:
      - "50001:5432"
    environment:
      - POSTGRES_DB=autodev_ai
      - POSTGRES_USER=autodev
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    networks:
      - autodev-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U autodev -d autodev_ai"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: autodev-ai-redis
    restart: unless-stopped
    ports:
      - "50002:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 1gb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - autodev-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Nginx Load Balancer & Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: autodev-ai-nginx
    restart: unless-stopped
    ports:
      - "50003:80"
      - "50004:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites-enabled:/etc/nginx/sites-enabled:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - autodev-logs:/var/log/nginx
    depends_on:
      - autodev-ai
    networks:
      - autodev-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: autodev-ai-prometheus
    restart: unless-stopped
    ports:
      - "50005:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - autodev-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: autodev-ai-grafana
    restart: unless-stopped
    ports:
      - "50006:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
    networks:
      - autodev-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Docker Sandbox Manager
  sandbox-manager:
    build:
      context: ../../
      dockerfile: deployment/docker/Dockerfile.sandbox
    image: autodev-ai-sandbox:latest
    container_name: autodev-ai-sandbox-manager
    restart: unless-stopped
    ports:
      - "50010-50090:50010-50090"
    environment:
      - SANDBOX_PORT_START=50010
      - SANDBOX_PORT_END=50090
      - MAX_CONCURRENT_SANDBOXES=20
      - SANDBOX_TIMEOUT=3600
      - DOCKER_HOST=unix:///var/run/docker.sock
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - sandbox-data:/var/lib/sandboxes
    networks:
      - autodev-network
    # Remove privileged mode for security
    # privileged: true
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - DAC_OVERRIDE
      - CHOWN
      - FOWNER
      - SETGID
      - SETUID
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Log Aggregator (ELK Stack - Elasticsearch)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: autodev-ai-elasticsearch
    restart: unless-stopped
    ports:
      - "50007:9200"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - autodev-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Logstash
  logstash:
    image: docker.elastic.co/logstash/logstash:8.8.0
    container_name: autodev-ai-logstash
    restart: unless-stopped
    ports:
      - "50008:5044"
    volumes:
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline:ro
      - ./monitoring/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
    depends_on:
      - elasticsearch
    networks:
      - autodev-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9600"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kibana
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: autodev-ai-kibana
    restart: unless-stopped
    ports:
      - "50009:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - autodev-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  elasticsearch-data:
    driver: local
  autodev-uploads:
    driver: local
  autodev-logs:
    driver: local
  autodev-temp:
    driver: local
  sandbox-data:
    driver: local

networks:
  autodev-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16